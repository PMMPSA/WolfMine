<?php

/*
 * Copyright (C) 2015  ChalkPE
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

/**
 * @author ChalkPE <chalkpe@gmail.com>
 * @since 2015-06-20 17:04
 */

namespace chalk\cameraman;

use chalk\cameraman\movement\Movement;
use chalk\cameraman\movement\StraightMovement;
use chalk\cameraman\task\AutoSaveTask;
use chalk\utils\Messages;
use pocketmine\command\Command;
use pocketmine\command\CommandSender;
use pocketmine\event\Listener;
use pocketmine\event\player\PlayerQuitEvent;
use pocketmine\event\server\DataPacketReceiveEvent;
use pocketmine\level\Location;
use pocketmine\math\Vector3;
use pocketmine\network\mcpe\protocol\MovePlayerPacket;
use pocketmine\Player;
use pocketmine\plugin\PluginBase;
use pocketmine\utils\Config;
use pocketmine\utils\TextFormat;

class Cameraman extends PluginBase implements Listener {
    /** @var Cameraman */
    private static $instance = null;

    /**
     * @return Cameraman
     */
    public static function getInstance(){
        return self::$instance;
    }

    /* ====================================================================================================================== *
     *                                                    GLOBAL VARIABLES                                                    *
     * ====================================================================================================================== */

    const TICKS_PER_SECOND = 10;
    const DELAY = 100;

    /** @var Location[][] */
    private $waypointMap = [];

    /** @var Camera[] */
    private $cameras = [];

    /* ====================================================================================================================== *
     *                                                    EVENT LISTENERS                                                     *
     * ====================================================================================================================== */

    public function onLoad(){
        self::$instance = $this;
    }

    public function onEnable(){
        $this->loadConfigs();
        $this->loadMessages();

        $this->getServer()->getPluginManager()->registerEvents($this, $this);
        $this->getScheduler()->scheduleRepeatingTask(new AutoSaveTask(), 20 * 60 * 15); //15m
    }

    public function onDisable(){
        $this->saveConfigs();
    }

    public function onPlayerQuit(PlayerQuitEvent $event){
        if(($camera = $this->getCamera($event->getPlayer())) !== null and $camera->isRunning()){
            $camera->stop();
        }
    }

    public function onDataPacketReceive(DataPacketReceiveEvent $event){
        if($event->getPacket() instanceof MovePlayerPacket and ($camera = $this->getCamera($event->getPlayer())) !== null and $camera->isRunning()){
            $event->setCancelled(true);
        }
    }

    /* ====================================================================================================================== *
     *                                                    RESOURCE CONTROL                                                    *
     * ====================================================================================================================== */

    /** @var Messages */
    private $messages = null;
    const MESSAGE_VERSION = 1;

    public function loadMessages(){
        @mkdir($this->getDataFolder());
        $this->updateMessages("messages.yml");
        $this->messages = new Messages((new Config($this->getDataFolder() . "messages.yml", Config::YAML))->getAll());
    }

    /**
     * @param string $filename
     */
    public function updateMessages($filename = "messages.yml"){
        $this->saveResource($filename, false);

        $messages = (new Config($this->getDataFolder() . $filename, Config::YAML))->getAll();
        if(!isset($messages["version"]) or $messages["version"] < self::MESSAGE_VERSION){
            $this->saveResource($filename, true);
        }
    }

    /**
     * @return Messages
     */
    public function getMessages(){
        return $this->messages;
    }

    public function loadConfigs(){
        @mkdir($this->getDataFolder());
        $config = new Config($this->getDataFolder() . "waypoint-map.json", Config::JSON);

        foreach($config->getAll() as $key => $waypoints){
            $this->waypointMap[$key] = [];
            foreach($waypoints as $waypoint){
                $x = floatval($waypoint["x"]); $y = floatval($waypoint["y"]); $z = floatval($waypoint["y"]);
                $yaw = floatval($waypoint["yaw"]); $pitch = floatval($waypoint["pitch"]);
                $level = $this->getServer()->getLevelByName($waypoint["level"]);

                $this->waypointMap[$key][] = new Location($x, $y, $z, $yaw, $pitch, $level);
            }
        }
    }

    public function saveConfigs(){
        $waypointMap = [];

        foreach($this->getWaypointMap() as $key => $waypoints){
            if($key === null) continue;

            $waypointMap[$key] = [];
            foreach($waypoints as $waypoint){
                $waypointMap[$key][] = [
                    "x" => $waypoint->getX(), "y" => $waypoint->getY(), "z" => $waypoint->getZ(),
                    "yaw" => $waypoint->getYaw(), "pitch" => $waypoint->getPitch(),
                    "level" => $waypoint->isValid() ? $waypoint->getLevel()->getName() : null
                ];
            }
        }

        $config = new Config($this->getDataFolder() . "waypoint-map.json", Config::JSON);
        $config->setAll($waypointMap);
        $config->save();
    }

    /* ====================================================================================================================== *
     *                                                   GETTERS AND SETTERS                                                  *
     * ====================================================================================================================== */

    /**
     * @return Location[][]
     */
    public function getWaypointMap(){
        return $this->waypointMap;
    }

    /**
     * @param Location[][] $waypointMap
     * @return Location[][]
     */
    public function setWaypointMap(array $waypointMap){
        $this->waypointMap = $waypointMap;
        return $waypointMap;
    }

    /**
     * @param Player $player
     * @return Location[]
     */
    public function getWaypoints(Player $player){
        return isset($this->waypointMap[$player->getName()]) ? $this->waypointMap[$player->getName()] : null;
    }

    /**
     * @param Player $player
     * @param Location[] $waypoints
     * @return Location[]
     */
    public function setWaypoints(Player $player, array $waypoints){
        $this->waypointMap[$player->getName()] = $waypoints;
        return $waypoints;
    }

    /**
     * @param Player $player
     * @param Location $waypoint
     * @param int $index
     * @return Location[]
     */
    public function setWaypoint(Player $player, Location $waypoint, $index = -1){
        if($index >= 0){
            $this->waypointMap[$player->getName()][$index] = $waypoint;
        }else{
            $this->waypointMap[$player->getName()][] = $waypoint;
        }
        return $this->waypointMap[$player->getName()];
    }

    /**
     * @return Camera[]
     */
    public function getCameras(){
        return $this->cameras;
    }

    /**
     * @param Player $player
     * @return Camera|null
     */
    public function getCamera(Player $player){
        return isset($this->cameras[$player->getName()]) ? $this->cameras[$player->getName()] : null;
    }

    /**
     * @param Player $player
     * @param Camera $camera
     * @return Camera
     */
    public function setCamera(Player $player, Camera $camera){
        $this->cameras[$player->getName()] = $camera;
        return $camera;
    }

    /* ====================================================================================================================== *
     *                                                     HELPER METHODS                                                     *
     * ====================================================================================================================== */

    /**
     * @param Location[] $waypoints
     * @return Movement[]
     */
    public static function createStraightMovements(array $waypoints){
        $lastWaypoint = null;

        $movements = [];
        foreach($waypoints as $waypoint){
            if($lastWaypoint !== null and !$waypoint->equals($lastWaypoint)){
                $movements[] = new StraightMovement($lastWaypoint, $waypoint);
            }
            $lastWaypoint = $waypoint;
        }
        return $movements;
    }

    /**
     * @param Player $player
     * @return bool|int
     */
    public static function sendMovePlayerPacket(Player $player){
        $packet = new MovePlayerPacket();
        $packet->entityRuntimeId = $player->getId();
        $packet->position = $player->asVector3();
        $packet->yaw = $player->getYaw();
        $packet->headYaw = $player->getYaw();
        $packet->pitch = $player->getPitch();
        $packet->onGround = false;

        return $player->dataPacket($packet);
    }

    /* ====================================================================================================================== *
     *                                                     MESSAGE SENDERS                                                    *
     * ====================================================================================================================== */

    private static $colorError = TextFormat::RESET . TextFormat::RED;
    private static $colorLight = TextFormat::RESET . TextFormat::GREEN;
    private static $colorDark  = TextFormat::RESET . TextFormat::DARK_GREEN;
    private static $colorTitle = TextFormat::RESET . TextFormat::DARK_GREEN . TextFormat::BOLD;
    private static $colorTITLE = TextFormat::RESET . TextFormat::RED        . TextFormat::BOLD;

    private static $commands = [
        "p", "start", "stop", "info", "goto", "clear", "help", "about"
    ];

    private static $commandMap = [
        "1" => ["p", "start", "stop"],
        "2" => ["info", "goto", "clear"],
        "3" => ["help", "about"]
    ];

    /**
     * @param CommandSender $sender
     * @param string $key
     * @param array $format
     * @return bool
     */
    public function sendMessage(CommandSender $sender, $key, $format = []){
        if($sender === null){
            return false;
        }

        if($key[0] === '@'){
            $key = substr($key, 1);
            $prefix = Cameraman::$colorTitle;
        }else if($key[0] === '!'){
            $key = substr($key, 1);
            $prefix = Cameraman::$colorDark;
        }else if($key[0] === '?'){
            $key = substr($key, 1);
            $prefix = Cameraman::$colorLight;
        }else if ($key[0] === '.'){
            $key = substr($key, 1);
            $prefix = Cameraman::$colorTitle . $this->getMessages()->getMessage("prefix") . Cameraman::$colorDark;
        }else if ($key[0] === '#'){
            $key = substr($key, 1);
            $prefix = Cameraman::$colorTITLE . $this->getMessages()->getMessage("prefix") . Cameraman::$colorError;
        }else{
            $prefix = Cameraman::$colorTitle . $this->getMessages()->getMessage("prefix") . Cameraman::$colorLight;
        }

        $sender->sendMessage($prefix . $this->getMessages()->getMessage($key, $format));
        return true;
    }

    /**
     * @param CommandSender $sender
     * @return bool
     */
    public function sendAboutMessages(CommandSender $sender){
        $this->sendMessage($sender, "@message-about", ["version" => $this->getDescription()->getVersion(), "chalkpe" => $this->getDescription()->getAuthors()[0], "website" => $this->getDescription()->getWebsite()]);
        return true;
    }

    /**
     * @param CommandSender $sender
     * @return bool
     */
    public function sendUnknownCommandErrorMessage(CommandSender $sender){
        $this->sendMessage($sender, "#error-unknown-command-0");
        $this->sendMessage($sender, "#error-unknown-command-1");
        return true;
    }

    /**
     * @param CommandSender $sender
     * @param string $param
     * @return bool
     */
    public function sendHelpMessages(CommandSender $sender, $param = "1"){
        $param = strToLower($param);

        if($param === ""){
            foreach(Cameraman::$commands as $command){
                $this->sendMessage($sender,  "command-" . $command . "-usage");
                $this->sendMessage($sender, ".command-" . $command . "-description");
            }
            return true;
        }

        if(is_numeric($param)){
            $this->sendMessage($sender, "@message-help", ["current" => $param, "total" => count(Cameraman::$commandMap)]);
            if(isset(Cameraman::$commandMap[$param])){
                foreach(Cameraman::$commandMap[$param] as $command){
                    $this->sendMessage($sender,  "command-" . $command . "-usage");
                    $this->sendMessage($sender, ".command-" . $command . "-description");
                }
            }
            return true;
        }

        if(in_array($param, Cameraman::$commands)){
            $this->sendMessage($sender,  "command-" . $param . "-usage");
            $this->sendMessage($sender, ".command-" . $param . "-description");

            return true;
        }

        return $this->sendUnknownCommandErrorMessage($sender);
    }

    /**
     * @param CommandSender $sender
     * @param Vector3 $waypoint
     * @param int $index
     * @return bool
     */
    public function sendWaypointMessage(CommandSender $sender, Vector3 $waypoint, $index){
        $this->sendMessage($sender, "message-waypoint-info", ["index" => $index, "x" => $waypoint->getFloorX(), "y" => $waypoint->getFloorY(), "z" => $waypoint->getFloorZ()]);

        return true;
    }

    /* ====================================================================================================================== *
     *                                                    COMMAND HANDLERS                                                    *
     * ====================================================================================================================== */

    /**
     * @param int $index
     * @param array $array
     * @param CommandSender $sender
     * @return bool
     */
    public function checkIndex($index, array $array, CommandSender $sender = null){
        if($index < 1 or $index > count($array)){
            $this->sendMessage($sender, "#error-index-out-of-bounds", ["total" => count($array)]);
            return true;
        }
        return false;
    }

    /**
     * @param CommandSender $sender
     * @param Command $command
     * @param string $commandAlias
     * @param array $args
     * @return bool
     */
    public function onCommand(CommandSender $sender, Command $command, string $commandAlias, array $args) : bool{
        if(!$sender instanceof Player){
            $this->sendMessage($sender, "#error-only-in-game");
            return true;
        }

        if(count($args) < 1){
            return $this->sendHelpMessages($sender);
        }

        switch(strToLower($args[0])){
            default:
                $this->sendUnknownCommandErrorMessage($sender);
                break;

            case "help":
                if(count($args) > 1){
                    return $this->sendHelpMessages($sender, $args[1]);
                }else{
                    return $this->sendHelpMessages($sender);
                }

            case "about":
                return $this->sendAboutMessages($sender);

            case "p":
                if(($waypoints = $this->getWaypoints($sender)) === null){
                    $waypoints = $this->setWaypoints($sender, []);
                }

                if(count($args) > 1 and is_numeric($args[1])){
                    if($this->checkIndex($index = intval($args[1]), $waypoints, $sender)){
                        return true;
                    }

                    $waypoints = $this->setWaypoint($sender, $sender->getLocation(), $index - 1);
                    $this->sendMessage($sender, "message-reset-waypoint", ["index" => $index, "total" => count($waypoints)]);
                }else{
                    $waypoints = $this->setWaypoint($sender, $sender->getLocation());
                    $this->sendMessage($sender, "message-added-waypoint", ["index" => count($waypoints)]);
                }
                break;

            case "start":
                if(count($args) < 2 or !is_numeric($args[1])){
                    return $this->sendHelpMessages($sender, $args[0]);
                }

                if(($waypoints = $this->getWaypoints($sender)) === null or count($waypoints) < 2){
                    $this->sendMessage($sender, "#error-too-few-waypoints");
                    return $this->sendHelpMessages($sender, "p");
                }

                if(($slowness = doubleval($args[1])) < 0.0000001){
                    return $this->sendMessage($sender, "#error-negative-slowness", ["slowness" => $slowness]);
                }

                if(($camera = $this->getCamera($sender)) !== null and $camera->isRunning()){
                    $this->sendMessage($sender, ".message-interrupting-current-travel");
                    $camera->stop();
                }

                $this->setCamera($sender, new Camera($sender, Cameraman::createStraightMovements($waypoints), $slowness))->start();
                break;

            case "stop":
                if(($camera = $this->getCamera($sender)) === null or !$camera->isRunning()){
                    return $this->sendMessage($sender, "#error-travels-already-interrupted");
                }

                $camera->stop(); unset($camera);
                $this->sendMessage($sender, "message-travelling-interrupted");
                break;

            case "info":
                if(($waypoints = $this->getWaypoints($sender)) === null or count($waypoints) === 0){
                    return $this->sendMessage($sender, "#error-no-waypoints-to-show");
                }

                if(count($args) > 1 and is_numeric($args[1])){
                    if($this->checkIndex($index = intval($args[1]), $waypoints, $sender)){
                        return true;
                    }

                    $this->sendWaypointMessage($sender, $waypoints[$index - 1], $index);
                }else{
                    foreach($waypoints as $index => $waypoint){
                        $this->sendWaypointMessage($sender, $waypoint, $index + 1);
                    }
                }
                break;

            case "goto":
                if(count($args) < 2 or !is_numeric($args[1])){
                    return $this->sendHelpMessages($sender, $args[0]);
                }

                if(($waypoints = $this->getWaypoints($sender)) === null or count($waypoints) === 0){
                    return $this->sendMessage($sender, "#error-no-waypoints-to-teleport");
                }

                if($this->checkIndex($index = intval($args[1]), $waypoints, $sender)){
                    return true;
                }

                $sender->teleport($waypoints[$index - 1]);
                $this->sendMessage($sender, "message-teleported", ["index" => $index]);
                break;

            case "clear":
                if(($waypoints = $this->getWaypoints($sender)) === null or count($waypoints) === 0){
                    return $this->sendMessage($sender, "#error-no-waypoints-to-remove");
                }

                if(count($args) > 1 and is_numeric($args[1])){
                    if($this->checkIndex($index = intval($args[1]), $waypoints, $sender)){
                        return true;
                    }

                    array_splice($waypoints, $index - 1, 1);
                    $this->sendMessage($sender, "message-removed-waypoint", ["index" => $index, "total" => count($waypoints)]);
                }else{
                    $waypoints = [];
                    $this->sendMessage($sender, "message-all-waypoint-removed");
                }
                $this->setWaypoints($sender, $waypoints);
                break;
        }
        return true;
    }
}
version: '1'
default-language: "eng"

messages:
  prefix:
    eng: "[Cameraman] "
    kor: "[카메라맨] "

  command-p-usage:
    eng: "/cam p [index]"
    kor: "/cam p [번호]"

  command-p-description:
    eng: "Adds a waypoint at the current position"
    kor: "현재 위치를 웨이포인트로 추가합니다"

  command-start-usage:
    eng: "/cam start <slowness>"
    kor: "/cam start <느린 정도>"

  command-start-description:
    eng: "Travels the path in the given slowness"
    kor: "주어진 느린 정도로 경로를 여행합니다"

  command-stop-usage:
    eng: "/cam stop"
    kor: "/cam stop"

  command-stop-description:
    eng: "Interrupts travelling"
    kor: "여행을 정지합니다"

  command-info-usage:
    eng: "/cam info [index]"
    kor: "/can info [번호]"

  command-info-description:
    eng: "Shows the information of current waypoints"
    kor: "해당 웨이포인트의 정보를 보여드립니다"

  command-goto-usage:
    eng: "/cam goto <index>"
    kor: "/cam goto <번호>"

  command-goto-description:
    eng: "Teleports to the specified waypoint"
    kor: "특정 웨이포인트로 순간이동합니다"

  command-clear-usage:
    eng: "/cam clear [index]"
    kor: "/cam clear [번호]"

  command-clear-description:
    eng: "Removes all or specific waypoints"
    kor: "모든 웨이포인트나 특정 웨이포인트를 제거합니다"

  command-help-usage:
    eng: "/cam help [command]"
    kor: "/cam help [명령어]"

  command-help-description:
    eng: "Shows the help menu of commands"
    kor: "명령어 도움말 메뉴를 보여드립니다"

  command-about-usage:
    eng: "/cam about"
    kor: "/cam about"

  command-about-description:
    eng: "Shows the information of this plugin"
    kor: "이 플러그인의 정보를 보여드립니다"

  message-help:
    eng: "-- Showing help page {%current} of {%total} (/cam help [page]) --"
    kor: "-- 총 {%total}개 페이지 중 {%current}번째 페이지 (/cam help [page]) --"

  message-about:
    eng: "Cameraman v{%version} by {%chalkpe} - {%website}"
    kor: "카메라맨 v{%version} by {%chalkpe} - {%website}"

  message-reset-waypoint:
    eng: "Reset Waypoint #{%index} (total: {%total})"
    kor: "{%index}번 웨이포인트를 재설정했습니다 (총 {%total}개)"

  message-added-waypoint:
    eng: "Added Waypoint #{%index}"
    kor: "{%index}번 웨이포인트를 설정했습니다"

  message-interrupting-current-travel:
    eng: "Interrupting current travels..."
    kor: "기존의 여행을 중지하는 중입니다..."

  message-travelling-interrupted:
    eng: "Travelling has been interrupted!"
    kor: "여행이 중지되었습니다!"

  message-teleported:
    eng: "Teleported to Waypoint #{%index}!"
    kor: "{%index}번 웨이포인트로 순간이동했습니다!"

  message-removed-waypoint:
    eng: "Waypoint #{%index} has been removed! (total: {%total})"
    kor: "{%index}번 웨이포인트가 제거되었습니다! (총 {%total}개)"

  message-all-waypoint-removed:
    eng: "All waypoints has been removed!"
    kor: "모든 웨이포인트가 제거되었습니다!"

  message-waypoint-info:
    eng: "Waypoint #{%index} - [{%x}, {%y}, {%z}]"
    kor: "{%index}번 웨이포인트 - [{%x}, {%y}, {%z}]"

  message-travelling-will-start:
    eng: "Travelling will start in a few seconds..."
    kor: "몇 초 내로 여행이 시작됩니다..."

  message-travelling-started:
    eng: "Travelling started! (slowness: {%slowness})"
    kor: "여행이 시작되었습니다! (느린 정도: {%slowness})"

  message-travelling-finished:
    eng: "Travelling finished!"
    kor: "여행이 끝났습니다!"

  error-unknown-command-0:
    eng: "Unknown command!"
    kor: "알 수 없는 명령어입니다!"

  error-unknown-command-1:
    eng: "Try \"/cam help\" for a list of commands"
    kor: "\"/cam help\"를 입력해 명령어 목록을 확인해 보세요"

  error-only-in-game:
    eng: "Please issue this command in-game!"
    kor: "게임 내에서 명령어를 사용해 주세요!"

  error-index-out-of-bounds:
    eng: "The index is out of bounds! (total: {%total})"
    kor: "범위 밖의 번호입니다! (총 {%total}개)"

  error-too-few-waypoints:
    eng: "You should set at least two waypoints!"
    kor: "적어도 두 개 이상의 웨이포인트를 설정해야 합니다!"

  error-negative-slowness:
    eng: "The slowness must be positive! (current: {%slowness})"
    kor: "느린 정도는 양수여야 합니다! (현재: {%slowness}"

  error-travels-already-interrupted:
    eng: "Travels are already interrupted!"
    kor: "여행은 이미 중지되었습니다!"

  error-no-waypoints-to-show:
    eng: "There are no waypoints to show!"
    kor: "보여드릴 웨이포인트가 하나도 없습니다!"

  error-no-waypoints-to-teleport:
    eng: "There are no waypoints to teleport!"
    kor: "순간이동할 웨이포인트가 하나도 없습니다!"

  error-no-waypoints-to-remove:
    eng: "There are no waypoints to remove!"
    kor: "제거할 웨이포인트가 하나도 없습니다!"<?php

/*
 * Copyright 2015 ChalkPE
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * @author ChalkPE <amato0617@gmail.com>
 * @since 2015-04-18 18:44
 * @copyright Apache-v2.0
 */

namespace chalk\utils;

class Messages {
    /** @var int */
    private $version;

    /** @var string */
    private $defaultLanguage;

    /** @var array */
    private $messages = [];

    /**
     * @param array $config
     */
    public function __construct(array $config){
        $version = $config["default-language"];
        $this->version = (isset($version) and is_int($version)) ? $version : 0;

        $defaultLanguage = $config["default-language"];
        $this->defaultLanguage = (isset($defaultLanguage) and is_string($defaultLanguage)) ? $defaultLanguage : "en";

        $messages = $config["messages"];
        $this->messages = (isset($messages) and is_array($messages)) ? $messages : [];
    }

    /**
     * @return int
     */
    public function getVersion() : string{
        return $this->version;
    }

    /**
     * @return string
     */
    public function getDefaultLanguage(){
        return $this->defaultLanguage;
    }

    /**
     * @return array
     */
    public function getMessages(){
        return $this->messages;
    }

    /**
     * @param string $key
     * @param string[] $format
     * @param string $language
     * @return null|string
     */
    public function getMessage($key, $format = [], $language = ""){
        if($language === ""){
            $language = $this->getDefaultLanguage();
        }

        $message = $this->getMessages()[$key];
        if(!isset($message)){
            return null;
        }

        $string = $message[$language];
        if(!isset($string) and $language !== $this->getDefaultLanguage()){
            $string = $message[$this->getDefaultLanguage()];
        }

        if(isset($string)){
            foreach($format as $key => $value){
                $string = str_replace("{%" . $key . "}", $value, $string);
            }
            return $string;
        }
        return null;
    }
}<?php

/**
 * @author ChalkPE <chalkpe@gmail.com>
 * @since 2015-10-25 19:25
 */

namespace chalk\cameraman\task;


use chalk\cameraman\Cameraman;
use pocketmine\scheduler\Task;

class AutoSaveTask extends Task {
    public function __construct(){
        $this->plugin = Cameraman::getInstance();
    }

    public function onRun(int $currentTick){
        Cameraman::getInstance()->saveConfigs();
    }
}<?php

/*
 * Copyright (C) 2015  ChalkPE
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

/**
 * @author ChalkPE <chalkpe@gmail.com>
 * @since 2015-06-21 16:10
 */

namespace chalk\cameraman;

use chalk\cameraman\movement\Movement;
use chalk\cameraman\task\CameraTask;
use pocketmine\level\Location;
use pocketmine\Player;

class Camera {
    /** @var Player */
    private $target;

    /** @var Movement[] */
    private $movements = [];

    /** @var number */
    private $slowness;

    /** @var int */
    private $taskId = -1;

    /** @var int */
    private $gamemode;

    /** @var Location */
    private $location;

    /**
     * @param Player $target
     * @param Movement[] $movements
     * @param number $slowness
     */
    function __construct(Player $target, array $movements, $slowness){
        $this->target = $target;
        $this->movements = $movements;
        $this->slowness = $slowness;
    }

    /**
     * @return Player
     */
    public function getTarget(){
        return $this->target;
    }

    /**
     * @return Movement[]
     */
    public function getMovements(){
        return $this->movements;
    }

    /**
     * @param int $index
     * @return Movement
     */
    public function getMovement($index){
        return $this->movements[$index];
    }

    /**
     * @return number
     */
    public function getSlowness(){
        return $this->slowness;
    }

    public function isRunning(){
        return $this->taskId !== -1;
    }

    public function start(){
        if(!$this->isRunning()){
            Cameraman::getInstance()->sendMessage($this->getTarget(), "message-travelling-will-start");

            $this->location = $this->getTarget()->getLocation();
            $this->gamemode = $this->getTarget()->getGamemode();

            $this->getTarget()->setGamemode(Player::SPECTATOR);

            $this->taskId = Cameraman::getInstance()->getScheduler()->scheduleDelayedRepeatingTask(new CameraTask($this), Cameraman::DELAY, 20 / Cameraman::TICKS_PER_SECOND)->getTaskId();
        }
    }

    public function stop(){
        if($this->isRunning()){
            Cameraman::getInstance()->getScheduler()->cancelTask($this->taskId); $this->taskId = -1;

            $this->getTarget()->teleport($this->location);
            $this->getTarget()->setGamemode($this->gamemode);

            Cameraman::getInstance()->sendMessage($this->getTarget(), "message-travelling-finished");
        }
    }
}<?php

/*
 * Copyright (C) 2015  ChalkPE
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

/**
 * @author ChalkPE <chalkpe@gmail.com>
 * @since 2015-07-02 14:11
 */

namespace chalk\cameraman\movement;

use pocketmine\level\Location;

class CurvedMovement extends StraightMovement {
    /**
     * @param Location $origin
     * @param Location $destination
     */
    public function __construct(Location $origin, Location $destination){
        parent::__construct($origin, $destination);
    }

    /**
     * @param number $slowness
     * @param float $curve
     * @return Location|null
     */
    public function tick($slowness, $curve = 5.0){
        if(($location = parent::tick($slowness)) !== null){
            $offset = $curve * sin(M_PI * ($this->current / ($this->length * $slowness)));
            $location->setComponents($location->getX() + $offset, $location->getY(), $location->getZ() + $offset);
        }
        return $location;
    }
}<?php

/*
 * Copyright (C) 2015  ChalkPE
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

/**
 * @author ChalkPE <chalkpe@gmail.com>
 * @since 2015-06-20 17:07
 */

namespace chalk\cameraman\movement;

use pocketmine\level\Location;

abstract class Movement {
    /** @var Location */
    private $origin;

    /** @var Location */
    private $destination;

    /**
     * @param Location $origin
     * @param Location $destination
     */
    public function __construct(Location $origin, Location $destination){
        $this->origin = $origin;
        $this->destination = $destination;
    }

    /**
     * @return Location
     */
    public function getOrigin(){
        return $this->origin;
    }

    /**
     * @return Location
     */
    public function getDestination(){
        return $this->destination;
    }

    public function __toString(){
        return "Movement(" . $this->getOrigin() . " -> " . $this->getDestination() . ")";
    }

    /**
     * @param number $slowness
     * @return Location|null
     */
    public abstract function tick($slowness);
}<?php

/*
 * Copyright (C) 2015  ChalkPE
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

/**
 * @author ChalkPE <chalkpe@gmail.com>
 * @since 2015-06-20 17:24
 */

namespace chalk\cameraman\movement;

use chalk\cameraman\Cameraman;
use pocketmine\level\Location;

class StraightMovement extends Movement {
    /** @var Location */
    private $distance;

    /** @var int */
    protected $current = 0, $length = 0;

    /**
     * @param Location $origin
     * @param Location $destination
     */
    function __construct(Location $origin, Location $destination){
        parent::__construct($origin, $destination);

        $this->distance = new Location($this->getDestination()->getX() - $this->getOrigin()->getX(), $this->getDestination()->getY() - $this->getOrigin()->getY(), $this->getDestination()->getZ() - $this->getOrigin()->getZ(), $this->getDestination()->getYaw() - $this->getOrigin()->getYaw(), $this->getDestination()->getPitch() - $this->getOrigin()->getPitch());
        $this->length = Cameraman::TICKS_PER_SECOND * max(abs($this->distance->getX()), abs($this->distance->getY()), abs($this->distance->getZ()), abs($this->distance->getYaw()), abs($this->distance->getPitch()));
    }

    /**
     * @param number $slowness
     * @return Location|null
     */
    public function tick($slowness){
        if(($length = $this->length * $slowness) < 0.0000001){
            return null;
        }

        if(($progress = $this->current++ / $length) > 1){
            return null;
        }

        return new Location($this->getOrigin()->getX() + $this->distance->getX() * $progress, 1.62 + $this->getOrigin()->getY() + $this->distance->getY() * $progress, $this->getOrigin()->getZ() + $this->distance->getZ() * $progress, $this->getOrigin()->getYaw() + $this->distance->getYaw() * $progress, $this->getOrigin()->getPitch() + $this->distance->getPitch() * $progress);
    }
}<?php

/*
 * Copyright (C) 2015  ChalkPE
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

/**
 * @author ChalkPE <chalkpe@gmail.com>
 * @since 2015-06-21 16:36
 */

namespace chalk\cameraman\task;

use chalk\cameraman\Camera;
use chalk\cameraman\Cameraman;
use pocketmine\scheduler\Task;

class CameraTask extends Task {
    /** @var int */
    private $index = -1;

    function __construct(Camera $camera){
		$this->plugin = $camera;
    }

    /**
     * @param $currentTick
     */
    public function onRun(int $currentTick){
        if($this->index < 0){
            Cameraman::getInstance()->sendMessage($this->getCamera()->getTarget(), "message-travelling-started", ["slowness" => $this->getCamera()->getSlowness()]);
            $this->index = 0;
        }

        if($this->index >= count($this->getCamera()->getMovements())){
            $this->getCamera()->stop();
            return;
        }

        if(($location = $this->getCamera()->getMovement($this->index)->tick($this->getCamera()->getSlowness())) === null){
            $this->index++;
            return;
        }

        $this->getCamera()->getTarget()->setPositionAndRotation($location, $location->getYaw(), $location->getPitch());
        Cameraman::sendMovePlayerPacket($this->getCamera()->getTarget());
    }

    /**
     * @return Camera
     */
    public function getCamera(){
        return $this->plugin;
    }
}
