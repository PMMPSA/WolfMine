<?php

namespace AdvancedKits;

use AdvancedKits\economy\EconomyManager;
use AdvancedKits\lang\LangManager;
use AdvancedKits\tasks\CoolDownTask;
use pocketmine\command\Command;
use pocketmine\command\CommandSender;
use pocketmine\Player;
use pocketmine\plugin\PluginBase;

class Main extends PluginBase{

    /** @var Kit[] */
    public $kits = [];
    /** @var string[] */
    public $hasKit = [];
    /** @var EconomyManager */
    public $economy;
    /** @var bool  */
    public $permManager;
    /** @var LangManager */
    public $langManager;
    /** @var  null|\PiggyCustomEnchants\Main */
    public $piggyCustomEnchantsInstance;
    /** @var  null|\jojoe77777\FormAPI\FormAPI */
    public $formAPIInstance;

    public function onEnable() : void{
        if(!is_dir($this->getDataFolder().'cooldowns/')){
            if(!mkdir($this->getDataFolder().'cooldowns/', 0777, true) && !is_dir($this->getDataFolder().'cooldowns/')){
                $this->getLogger()->error('Unable to create cooldowns folder');
            }
        }
        if(($plugin = $this->getServer()->getPluginManager()->getPlugin('PiggyCustomEnchants')) !== null){
            $this->piggyCustomEnchantsInstance = $plugin;
            $this->getLogger()->notice('PiggyCustomEnchants detected. Activated custom enchants support');
        }
        if(($plugin = $this->getServer()->getPluginManager()->getPlugin('FormAPI')) !== null){
            $this->formAPIInstance = $plugin;
            $this->getLogger()->notice('FormAPI detected. Activated kit selection UI support');
        }
        $this->saveDefaultConfig();
        $this->loadKits();
        $this->economy = new EconomyManager($this);
        $this->langManager = new LangManager($this);
        if(!$this->getConfig()->get('force-builtin-permissions') && $this->getServer()->getPluginManager()->getPlugin('PurePerms') !== null){
            $this->permManager = true;
            $this->getLogger()->notice('PurePerms mode enabled');
        }else{
            $this->permManager = false;
        }
        $this->getScheduler()->scheduleDelayedRepeatingTask(new CoolDownTask($this), 1200, 1200);
        $this->getServer()->getPluginManager()->registerEvents(new EventListener($this), $this);
    }

    public function onDisable() : void{
        foreach($this->kits as $kit){
            $kit->save();
        }
        $this->kits = [];
        $this->piggyCustomEnchantsInstance = null;
        $this->formAPIInstance = null;
    }

    public function onCommand(CommandSender $sender, Command $command, string $label, array $args) : bool{
        switch(strtolower($command->getName())){
            case 'kit':
                if(!($sender instanceof Player)){
                    $sender->sendMessage($this->langManager->getTranslation('in-game'));
                    return true;
                }
                if(!isset($args[0])){
                    if($this->formAPIInstance === null){
                        $sender->sendMessage($this->langManager->getTranslation('av-kits', implode(', ', array_keys($this->kits))));
                    }else{
                        $this->openKitUI($sender);
                    }
                    return true;
                }
                $kit = $this->getKit($args[0]);
                if($kit === null){
                    $sender->sendMessage($this->langManager->getTranslation('no-kit', $args[0]));
                    return true;
                }
                $kit->handleRequest($sender);
                return true;
            case 'akreload':
                foreach($this->kits as $kit){
                    $kit->save();
                }
                $this->kits = [];
                $this->loadKits();
                $sender->sendMessage($this->langManager->getTranslation('reload'));
                return true;
        }
        return true;
    }

    public function openKitUI(Player $player) : void{
        if($this->formAPIInstance === null){
            return;
        }
        $form = $this->formAPIInstance->createSimpleForm([$this, 'onPlayerSelection']);
        $form->setTitle($this->langManager->getTranslation('form-title'));
        foreach($this->kits as $kit){
            $form->addButton($kit->getFormName() ?? $kit->getName(), $kit->hasValidImage() ? $kit->getImageType() : -1, $kit->hasValidImage() ? $kit->getImageData() : '', $kit->getName());
        }
        $form->sendToPlayer($player);
    }

    public function onPlayerSelection(Player $player, ?string $data) : void{
        if($data === null){
            return;
        }
        $kit = $this->getKit($data);
        if($kit === null){
            return;
        }
        $kit->handleRequest($player);
    }

    private function loadKits() : void{
        $this->saveResource('kits.yml');
        $kitsData = yaml_parse_file($this->getDataFolder().'kits.yml');
        $this->fixConfig($kitsData);
        foreach($kitsData as $kitName => $kitData){
            $this->kits[$kitName] = new Kit($this, $kitData, $kitName);
        }
    }

    private function fixConfig(array &$config) : void{
        foreach($config as $name => $kit){
            if(isset($kit['users'])){
                $users = array_map('strtolower', $kit['users']);
                $config[$name]['users'] = $users;
            }
            if(isset($kit['worlds'])){
                $worlds = array_map('strtolower', $kit['worlds']);
                $config[$name]['worlds'] = $worlds;
            }
        }
    }

    /**
     * @param string $kitName
     * @return Kit|null
     */
    public function getKit(string $kitName) : ?Kit{
        /**@var Kit[] $lowerKeys*/
        $lowerKeys = array_change_key_case($this->kits, CASE_LOWER);
        if(isset($lowerKeys[strtolower($kitName)])){
            return $lowerKeys[strtolower($kitName)];
        }
        return null;
    }

    /**
     * @param $player
     * @return string|null
     */
    public function getPlayerKit($player) : ?string{
        if($player instanceof Player){
            $player = $player->getLowerCaseName();
        }else{
            $player = strtolower($player);
        }
        return $this->hasKit[$player] ?? null;
    }

}---
testkit:
  # ITEM FORMAT: "id:damage:count:name:ench_name:ench_level"
  # NO enchantments and NO custom name: "id:damage:count"

  # ONLY custom name: "id:damage:count:custom name"

  # ONLY enchantments: "id:damage:count:DEFAULT:enchantment1:level"
  # (Put DEFAULT in the name field if you do not want a custom name)
  # You can put as many enchantments as you want like this: "id:damage:count:DEFAULT:enchantment1:level:enchantment2:level" etc.

  # Enchantments AND custom name: "id:damage:count:custom name:enchantment1:level"
  # You can put as many enchantments as you want like this: "id:damage:count:custom name:enchantment1:level:enchantment2:level" etc.

  # You can write both numeric or string IDs
  items:
  - "260:0:10"
  - "267:0:1:Sword Name"
  helmet: "diamond_helmet:0:1"
  chestplate: "diamond_chestplate:0:1:DEFAULT:protection:1"
  leggings: "diamond_leggings:0:1:Leggings Name"
  boots: "diamond_boots:0:1"

  # Set items for specific slots, will override existing items. Only use if you want to assign items to specific slots, otherwise delete this.
  slots:
    9: "golden_apple:0:5"
    12: "bow:0:1"

  commands:
  - "tell {player} you got an awesome kit thanks to AdvancedKits plugin!"

  cooldown:
    hours: 24
    minutes: 30

  # EFFECT FORMAT: "name:seconds:amplifier"
  effects:
  - "speed:120:2"

  # Add a cost for the kit. Compatible with EconomyAPI, PocketMoney and MassiveEconomy
  # Put 0 if you want the kit to be free
  money: 50

  # If you do not use pureperms, use 'worlds' to specify in which worlds you want this kit to be used
  # Leave blank to let use the kit in all worlds
  worlds:
  - "kitpvp"

  # If you do not use pureperms, use 'users' to specify which players will be able to get this kit
  # Leave blank to let all the players use this kit
  users:
  - "luca28pet"
  - "dioconsole"

  # FormAPI users:
  # Img type: 'url' or 'path'
  img-type: ''
  # Put here the image URL/path
  img-data: ''
  # How the kit is displayed on the form
  form-name: 'Test Kit: 50$'

sgkit:
  items:
  - 'bow:0:1'
  - 'arrow:0:5'
  - 'stone_sword:0:1'
  - 'apple:0:5'
  helmet: 'leather_cap:0:1'
  chestplate: 'leather_tunic:0:1'
  commands:
  - 'tell {player} You got a SG example kit'
  cooldown:
    hours: 1
    minutes: 0
  money: 0
...
<?php

namespace AdvancedKits;

use pocketmine\command\ConsoleCommandSender;
use pocketmine\entity\Effect;
use pocketmine\entity\EffectInstance;
use pocketmine\item\enchantment\Enchantment;
use pocketmine\item\enchantment\EnchantmentInstance;
use pocketmine\item\Item;
use pocketmine\Player;

class Kit{

    private $ak;
    private $data;
    private $name;
    private $cost = 0;
    private $coolDown;
    private $coolDowns = [];

    /** @var Item[] */
    private $items = [];
    /** @var Item[] */
    private $armor = ['helmet' => null, 'chestplate' => null, 'leggings' => null, 'boots' => null];
    /** @var Item[] */
    private $slots = [];
    /** @var EffectInstance[] */
    private $effects = [];

    /** @var  int */
    private $imgType;
    /** @var  string */
    private $imgData;
    /** @var string */
    private $formName;

    public function __construct(Main $ak, array $data, string $name){
        $this->ak = $ak;
        $this->data = $data;
        $this->name = $name;
        $this->coolDown = $this->getCoolDownMinutes();

        if(isset($this->data['money']) && $this->data['money'] !== 0){
            $this->cost = (int) $this->data['money'];
        }
        if(file_exists($this->ak->getDataFolder().'cooldowns/'.strtolower($this->name).'.sl')){
            $this->coolDowns = unserialize(file_get_contents($this->ak->getDataFolder().'cooldowns/'.strtolower($this->name).'.sl'), ['allowed_classes' => false]);
        }

        foreach($this->data['items'] as $itemString){
            $item = $this->loadItem($itemString);
            if($item !== null){
                $this->items[] = $item;
            }
        }
        isset($this->data['helmet']) && ($this->armor['helmet'] = $this->loadItem($this->data['helmet']));
        isset($this->data['chestplate']) && ($this->armor['chestplate'] = $this->loadItem($this->data['chestplate']));
        isset($this->data['leggings']) && ($this->armor['leggings'] = $this->loadItem($this->data['leggings']));
        isset($this->data['boots']) && ($this->armor['boots'] = $this->loadItem($this->data['boots']));

        if(isset($this->data['slots']) && is_array($this->data['slots'])){
            foreach($this->data['slots'] as $index => $itemString){
                $item = $this->loadItem($itemString);
                if($item !== null){
                    $this->slots[$index] = $item;
                }
            }
        }

        if(isset($this->data['effects']) && is_array($this->data['effects'])){
            foreach($this->data['effects'] as $effectString){
                $effect = $this->loadEffect($effectString);
                if($effect !== null){
                    $this->effects[] = $effect;
                }
            }
        }

        if(isset($data['img-type'])){
            if($data['img-type'] === 'url'){
                $this->imgType = 1;
            }elseif($data['img-type'] === 'path'){
                $this->imgType = 0;
            }else{
                $this->ak->getLogger()->warning('Bad configuration in kit '.$this->name.'. Image type '.$data['img-type'].' not supproted. Please use \'path\' or \'url\'');
            }
        }
        if(isset($data['img-data'])){
            $this->imgData = $data['img-data'];
        }
        if(isset($data['form-name'])){
            $this->formName = $data['form-name'];
        }
    }

    public function getName() : string{
        return $this->name;
    }

    public function getImageType() : ?int{
        return $this->imgType;
    }

    public function getImageData() : ?string{
        return $this->imgData;
    }

    public function hasValidImage() : bool{
        return isset($this->imgType, $this->imgData);
    }

    public function getFormName() : ?string{
        return $this->formName;
    }

    public function handleRequest(Player $player) : bool{
        if($this->testPermission($player)){
            if(!isset($this->coolDowns[$player->getLowerCaseName()])){
                if(!($this->ak->getConfig()->get('one-kit-per-life') && isset($this->ak->hasKit[strtolower($player->getName())]))){
                    if($this->cost){
                        if($this->ak->economy->grantKit($player, $this->cost)){
                            $this->addTo($player);
                            $player->sendMessage($this->ak->langManager->getTranslation('sel-kit', $this->name));
                            return true;
                        }
                        $player->sendMessage($this->ak->langManager->getTranslation('cant-afford', $this->name));
                    }else{
                        $this->addTo($player);
                        $player->sendMessage($this->ak->langManager->getTranslation('sel-kit', $this->name));
                        return true;
                    }
                }else{
                    $player->sendMessage($this->ak->langManager->getTranslation('one-per-life'));
                }
            }else{
                $player->sendMessage($this->ak->langManager->getTranslation('cooldown1', $this->name));
                $player->sendMessage($this->ak->langManager->getTranslation('cooldown2', $this->getCoolDownLeft($player)));
            }
        }else{
            $player->sendMessage($this->ak->langManager->getTranslation('no-perm', $this->name));
        }
        return false;
    }

    public function addTo(Player $player) : void{
        foreach($this->items as $item){
            $player->getInventory()->addItem($item);
        }

        $this->armor['helmet'] !== null && $player->getArmorInventory()->setHelmet($this->armor['helmet']);
        $this->armor['chestplate'] !== null && $player->getArmorInventory()->setChestplate($this->armor['chestplate']);
        $this->armor['leggings'] !== null && $player->getArmorInventory()->setLeggings($this->armor['leggings']);
        $this->armor['boots'] !== null && $player->getArmorInventory()->setBoots($this->armor['boots']);

        foreach($this->slots as $slot => $item){
            $player->getInventory()->setItem($slot, $item);
        }

        foreach($this->effects as $effect){
            $player->addEffect(clone $effect);
        }

        if(isset($this->data['commands']) && is_array($this->data['commands'])){
            foreach($this->data['commands'] as $cmd){
                $this->ak->getServer()->dispatchCommand(new ConsoleCommandSender(), str_replace('{player}', $player->getName(), $cmd));
            }
        }
        if($this->coolDown){
            $this->coolDowns[$player->getLowerCaseName()] = $this->coolDown;
        }
        $this->ak->hasKit[$player->getLowerCaseName()] = $this->name;
    }


    private function loadItem(string $itemString) : ?Item{
        $array = explode(':', $itemString);
        if(count($array) < 2){
            $this->ak->getLogger()->warning('Bad configuration in kit '.$this->name.'. Item '.$itemString.' could not be loaded because name and damage are not specified');
            return null;
        }

        $name = array_shift($array);
        $damage = array_shift($array);
        try{
            $item = Item::fromString($name.':'.$damage);
        }catch(\InvalidArgumentException $exception){
            $this->ak->getLogger()->warning('Bad configuration in kit '.$this->name.'. Item '.$itemString.' could not be loaded');
            $this->ak->getLogger()->warning($exception->getMessage());
            return null;
        }

        if(!empty($array)){
            $count = array_shift($array);
            if(is_numeric($count)){
                $item->setCount((int) $count);
            }else{
                $this->ak->getLogger()->warning('Bad configuration in kit '.$this->name.'. Item '.$itemString.' could not be loaded because the count is not a number');
                return null;
            }
        }

        if(!empty($array)){
            $name = array_shift($array);
            if(strtolower($name) !== 'default'){
                $item->setCustomName($name);
            }
        }

        if(!empty($array)){
            $enchantmentsArrays = array_chunk($array, 2);
            foreach ($enchantmentsArrays as $enchantmentsData){
                if(count($enchantmentsData) !== 2){
                    $this->ak->getLogger()->warning('Bad configuration in kit '.$this->name.'. Enchantments must be specified in the format name:level. Enchantment: '.$enchantmentsData[0].' will not be included in the item '.$itemString);
                    continue;
                }

                $enchantment = Enchantment::getEnchantmentByName($enchantmentsData[0]);
                if($enchantment === null){ //If the specified enchantment is not a vanilla enchantment
                    if($this->ak->piggyCustomEnchantsInstance !== null){ //Check if PiggyCustomEnchants is loaded and try to load the enchantment from there
                        $enchantment = \PiggyCustomEnchants\CustomEnchants\CustomEnchants::getEnchantmentByName($enchantmentsData[0]);
                        if($enchantment === null){ //If the specified enchantment is not a custom enchantment
                            $this->ak->getLogger()->warning('Bad configuration in kit '.$this->name.'. Enchantment '.$enchantmentsData[0].' in item '.$itemString.' could not be loaded because the enchantment does not exist');
                            continue;
                        }
                    }else{
                        $this->ak->getLogger()->warning('Bad configuration in kit '.$this->name.'. Enchantment '.$enchantmentsData[0].' in item '.$itemString.' could not be loaded because the enchantment does not exist');
                        continue;
                    }
                }

                if(!is_numeric($array[1])){
                    $this->ak->getLogger()->warning('Bad configuration in kit '.$this->name.'. Enchantment '.$enchantmentsData[0].' in item '.$itemString.' could not be loaded because the level is not a number');
                    continue;
                }

                if($this->ak->piggyCustomEnchantsInstance !== null && $enchantment instanceof \PiggyCustomEnchants\CustomEnchants\CustomEnchants){
                    $this->ak->piggyCustomEnchantsInstance->addEnchantment($item, [$enchantmentsData[0]], [(int) $enchantmentsData[1]]);
                }else{
                    $item->addEnchantment(new EnchantmentInstance($enchantment, (int) $enchantmentsData[1]));
                }
            }
        }
        return $item;
    }

    private function loadEffect(string $effectString) : ?EffectInstance{
        $array = explode(':', $effectString);
        if(count($array) < 2){
            $this->ak->getLogger()->warning('Bad configuration in kit '.$this->name.'. Effect '.$effectString.' could not be loaded because name and level are not specified');
            return null;
        }
        $name = array_shift($array);
        $duration = array_shift($array);
        if(!is_numeric($duration)){
            $this->ak->getLogger()->warning('Bad configuration in kit '.$this->name.'. Effect '.$effectString.' could not be loaded because the duration is not a number');
            return null;
        }

        if(!empty($array)){
            $amplifier = array_shift($array);
             if(!is_numeric($amplifier)){
                 $this->ak->getLogger()->warning('Bad configuration in kit '.$this->name.'. Effect '.$effectString.' could not be loaded because the amplifier is not a number');
                 return null;
             }
        }else{
            $amplifier = 0;
        }

        $e = Effect::getEffectByName($name);
        if($e === null){
            $this->ak->getLogger()->warning('Bad configuration in kit '.$this->name.'. Effect '.$effectString.' could not be loaded because the effect does not exist');
            return null;
        }
        return new EffectInstance($e, (int) $duration * 20, (int) $amplifier);
    }

    private function getCoolDownMinutes() : int{
        $min = 0;
        if(isset($this->data['cooldown']['minutes'])){
            $min += (int) $this->data['cooldown']['minutes'];
        }
        if(isset($this->data['cooldown']['hours'])){
            $min += (int) $this->data['cooldown']['hours'] * 60;
        }
        return $min;
    }

    private function getCoolDownLeft(Player $player) : string{
        if(($minutes = $this->coolDowns[$player->getLowerCaseName()]) < 60){
            return $this->ak->langManager->getTranslation('cooldown-format1', $minutes);
        }
        if(($modulo = $minutes % 60) !== 0){
            return $this->ak->langManager->getTranslation('cooldown-format2', floor($minutes / 60), $modulo);
        }
        return $this->ak->langManager->getTranslation('cooldown-format3', $minutes / 60);
    }

    public function processCoolDown() : void{
        foreach($this->coolDowns as $player => $min){
            --$this->coolDowns[$player];
            if($this->coolDowns[$player] <= 0){
                unset($this->coolDowns[$player]);
            }
        }
    }

    private function testPermission(Player $player) : bool{
        if($this->ak->permManager){
            return $player->hasPermission('advancedkits.'.strtolower($this->name)) || $player->hasPermission('advancedkits.'.$this->name);
        }

        return
            (isset($this->data['users']) ? in_array($player->getLowerCaseName(), $this->data['users'], true) : true)
            &&
            (isset($this->data['worlds']) ? in_array(strtolower($player->getLevel()->getName()), $this->data['worlds'], true) : true)
        ;
    }

    public function save() : void{
        if(!empty($this->coolDowns)){
            file_put_contents($this->ak->getDataFolder().'cooldowns/'.strtolower($this->name).'.sl', serialize($this->coolDowns));
        }
    }

}
<?php

namespace AdvancedKits\economy;

use AdvancedKits\Main;
use pocketmine\Player;

class EconomyManager{

    private $economy;
    private $api;

    public function __construct(Main $ak){
        foreach(['EconomyAPI', 'PocketMoney', 'MassiveEconomy'] as $ecoPluginName){
            if(($ecoPlugin = $ak->getServer()->getPluginManager()->getPlugin($ecoPluginName)) !== null){
                $this->economy = $ecoPluginName;
                $this->api = $ecoPlugin;
                break;
            }
        }
    }

    public function grantKit(Player $player, int $money) : bool{
        if($this->economy === null){
            return false;
        }
        switch($this->economy){
            case 'EconomyAPI':
                if($this->api->reduceMoney($player, $money) === 1){
                    return true;
                }
            break;
            case 'PocketMoney':
                if($this->api->getMoney($player->getName()) < $money){
                    return false;
                }
                if($this->api->setMoney($player->getName(), $this->api->getMoney($player->getName()) - $money)){
                    return true;
                }
            break;
            case 'MassiveEconomy':
                if($this->api->takeMoney($player->getName(), $money) === 2){
                    return true;
                }
            break;
        }
        return false;
    }

}<?php

namespace AdvancedKits\lang;

use AdvancedKits\Main;
use pocketmine\utils\Config;
use pocketmine\utils\TextFormat;

class LangManager{

    public const LANG_VERSION = 1;
    private const PREFIX = TextFormat::AQUA.'['.TextFormat::RED.'AdvancedKits'.TextFormat::AQUA.'] '.TextFormat::WHITE;

    private $ak;
    private $defaults;
    private $data;

    public function __construct(Main $ak){
        $this->ak = $ak;
        $this->defaults = [
            'lang-version' => self::LANG_VERSION,
            'in-game' => self::PREFIX.'Please run this command in game',
            'av-kits' => self::PREFIX.'Available kits: {%0}',
            'no-kit' => self::PREFIX.'Kit {%0} does not exist',
            'reload' => self::PREFIX.'Reloaded kits settings',
            'sel-kit' => self::PREFIX.'Selected kit: {%0}',
            'cant-afford' => self::PREFIX.'You cannot afford kit: {%0}',
            'one-per-life' => self::PREFIX.'You can only get one kit per life',
            'cooldown1' => self::PREFIX.'Kit {%0} is in coolDown at the moment',
            'cooldown2' => self::PREFIX.'You will be able to get it in {%0}',
            'no-perm' => self::PREFIX.'You haven\'t the permission to use kit {%0}',
            'cooldown-format1' => self::PREFIX.'{%0} minutes',
            'cooldown-format2' => self::PREFIX.'{%0} hours and {%1} minutes',
            'cooldown-format3' => self::PREFIX.'{%0} hours',
            'no-sign-on-kit' => self::PREFIX.'On this sign, the kit is not specified',
            'no-perm-sign' => self::PREFIX.'You don\'t have permission to create a sign kit',
            'form-title' => self::PREFIX.'Available Kits'
        ];
        $this->data = new Config($this->ak->getDataFolder().'lang.properties', Config::PROPERTIES, $this->defaults);
        if($this->data->get('lang-version') != self::LANG_VERSION){
            $this->ak->getLogger()->warning('Translation file is outdated. The old file has been renamed and a new one has been created');
            @rename($this->ak->getDataFolder().'lang.properties', $this->ak->getDataFolder().'lang.properties.old');
            $this->data = new Config($this->ak->getDataFolder().'lang.properties', Config::PROPERTIES, $this->defaults);
        }
    }

    public function getTranslation(string $dataKey, ...$args) : string{
        if(!isset($this->defaults[$dataKey])){
            $this->ak->getLogger()->error('Invalid datakey '.$dataKey.' passed to method LangManager::getTranslation()');
            return '';
        }
        $str = $this->data->get($dataKey, $this->defaults[$dataKey]);
        foreach($args as $key => $arg){
            $str = str_replace('{%'.$key.'}', $arg, $str);
        }
        return str_replace('&', TextFormat::ESCAPE, $str);
    }

}<?php

namespace AdvancedKits\tasks;

use AdvancedKits\Main;
use pocketmine\scheduler\Task;

class CoolDownTask extends Task{

    private $plugin;

    public function __construct(Main $plugin){
        $this->plugin = $plugin;
    }

    public function onRun(int $tick){
        foreach($this->plugin->kits as $kit){
            $kit->processCoolDown();
        }
    }

}<?php

namespace AdvancedKits;

use pocketmine\block\Block;
use pocketmine\event\block\SignChangeEvent;
use pocketmine\event\Listener;
use pocketmine\event\player\PlayerDeathEvent;
use pocketmine\event\player\PlayerInteractEvent;
use pocketmine\event\player\PlayerQuitEvent;
use pocketmine\tile\Sign;
use pocketmine\utils\TextFormat;

class EventListener implements Listener{

    /**@var Main*/
    private $ak;

    public function __construct(Main $ak){
        $this->ak = $ak;
    }

    public function onSign(PlayerInteractEvent $event){
        $id = $event->getBlock()->getId();
        if($id === Block::SIGN_POST || $id === Block::WALL_SIGN){
            $tile = $event->getPlayer()->getLevel()->getTile($event->getBlock());
            if($tile instanceof Sign){
                $text = $tile->getText();
                if(strtolower(TextFormat::clean($text[0])) === strtolower($this->ak->getConfig()->get('sign-text'))){
                    $event->setCancelled();
                    if(empty($text[1])){
                        $event->getPlayer()->sendMessage($this->ak->langManager->getTranslation('no-sign-on-kit'));
                        return;
                    }
                    $kit = $this->ak->getKit($text[1]);
                    if($kit === null){
                        $event->getPlayer()->sendMessage($this->ak->langManager->getTranslation('no-kit', $text[1]));
                        return;
                    }
                    $kit->handleRequest($event->getPlayer());
                }
            }
        }
    }

    public function onSignChange(SignChangeEvent $event){
        if(strtolower(TextFormat::clean($event->getLine(0))) === strtolower($this->ak->getConfig()->get('sign-text')) && !$event->getPlayer()->hasPermission('advancedkits.admin')){
            $event->getPlayer()->sendMessage($this->ak->langManager->getTranslation('no-perm-sign'));
            $event->setCancelled();
        }
    }

    public function onDeath(PlayerDeathEvent $event){
        if(isset($this->ak->hasKit[$event->getPlayer()->getLowerCaseName()])){
            unset($this->ak->hasKit[$event->getPlayer()->getLowerCaseName()]);
        }
    }

    public function onLogOut(PlayerQuitEvent $event){
        if($this->ak->getConfig()->get('reset-on-logout') && isset($this->ak->hasKit[strtolower($event->getPlayer()->getName())])){
            unset($this->ak->hasKit[$event->getPlayer()->getLowerCaseName()]);
        }
    }

}