<?php

/*
 *
 * Newspaper
 *
 * Copyright Â© 2018 Johnmacrocraft
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 */

namespace Johnmacrocraft\Newspaper;

use Johnmacrocraft\Newspaper\forms\MainForm;
use Johnmacrocraft\Newspaper\tasks\CheckSubscriptionsTask;
use pocketmine\command\Command;
use pocketmine\command\CommandSender;
use pocketmine\event\Listener;
use pocketmine\event\player\PlayerJoinEvent;
use pocketmine\item\ItemFactory;
use pocketmine\item\ItemIds;
use pocketmine\lang\BaseLang;
use pocketmine\Player;
use pocketmine\plugin\Plugin;
use pocketmine\plugin\PluginBase;
use pocketmine\Server;
use pocketmine\utils\Config;
use pocketmine\utils\TextFormat;
use Johnmacrocraft\Newspaper\libs\spoondetector\SpoonDetector;

class Newspaper extends PluginBase implements Listener {

	/** @var string */
	private $dataFolder;
	/** @var string */
	private $newspaperFolder;
	/** @var string */
	private $playersFolder;

	/** @var BaseLang */
	private $baseLang_eng;
	/** @var BaseLang */
	private $baseLang_kor;
	/** @var BaseLang */
	private $baseLang_jpn;

	public function onEnable() : void {
		SpoonDetector::printSpoon($this, "spoon.txt");

		$this->dataFolder = $this->getDataFolder();

		if(!is_dir($this->newspaperFolder = $this->dataFolder . "newspapers/")) {
			mkdir($this->newspaperFolder);
		}
		if(!is_dir($this->playersFolder = $this->dataFolder . "players/")) {
			mkdir($this->playersFolder);
		}
		$this->saveDefaultConfig();

		foreach($this->getLanguageList() as $lang) {
			$langName = pathinfo($lang, PATHINFO_FILENAME);
			$this->{"baseLang_$langName"} = new BaseLang($langName, $this->getFile() . "resources/lang/");
		}

		$this->getServer()->getPluginManager()->registerEvents($this, $this);
		$this->getScheduler()->scheduleRepeatingTask(new CheckSubscriptionsTask($this), 12000); //10 minutes
	}

	/**
	 * @param CommandSender $sender
	 * @param Command $command
	 * @param string $label
	 * @param string[] $args
	 *
	 * @return bool
	 */
	public function onCommand(CommandSender $sender, Command $command, string $label, array $args) : bool {
		if($command->getName() === "newspaper") {
			if($sender instanceof Player) {
				$this->checkSubscriptions();
				$sender->sendForm(new MainForm($sender->getName()));
			} else {
				$sender->sendMessage(TextFormat::RED . $this->getLanguage($this->getConfig()->get("lang"))->translateString("command.onlyPlayers"));
			}
			return true;
		}
	}

	/**
	 * @param PlayerJoinEvent $event
	 * @priority MONITOR
	 */
	public function onPlayerJoin(PlayerJoinEvent $event) : void {
		$playerName = $event->getPlayer()->getLowerCaseName();
		if(!is_file($playerData = $this->getPlayersFolder() . "$playerName.yml")) {
			new Config($playerData,
				Config::YAML,
				["lang" => $this->getConfig()->get("lang"),
					"autorenew" => $this->getConfig()->get("autorenew"),
					"subscriptions" => []
				]
			);
		}

		$subscriptions = $this->getPlayerData($playerName);

		foreach($this->getSubscriptionsArray($subscriptions->getAll()) as $subscription) {
			$player = $event->getPlayer();
			$key = "subscriptions.$subscription.queue";
			foreach($queue = $subscriptions->getNested($key) as $newspaper) {
				$item = ItemFactory::fromString(ItemIds::WRITTEN_BOOK);
				$item->setCount(1);
				$item->setPages(($newspaperData = $this->getPublished($subscription, $newspaper))[1]->getAll());
				$item->setTitle($newspaperData[0]->get("name"));
				$item->setAuthor($newspaperData[0]->get("author"));
				$item->setGeneration($newspaperData[0]->get("generation"));

				if(!$player->getInventory()->canAddItem($item)) {
					$player->sendMessage(TextFormat::RED . $this->getLanguage(Newspaper::getPlayerData($playerName)->get("lang"))->translateString("main.error.sub.invNoSpace", [$subscription]));
					break 2;
				}

				$player->getInventory()->addItem($item);

				unset($queue[array_search($newspaper, $queue)]);
				$subscriptions->setNested($key, array_values($queue));
			}
		}
		$subscriptions->save();
	}

	/**
	 * Creates a new newspaper.
	 *
	 * @param string $newspaper
	 * @param string $description
	 * @param array $member
	 * @param string $icon
	 * @param int $perOneFee
	 * @param int $subsFee
	 */
	public function createNewspaper(string $newspaper, string $description, array $member, string $icon, int $perOneFee, int $subsFee) {
		$newspaperPath = $this->getNewspaperFolder() . strtolower($newspaper);

		mkdir($newspaperPath);
		mkdir($newspaperPath . "/newspaper");

		$info = new Config($newspaperPath . "/info.yml",
			Config::YAML,
			["name" => $newspaper,
				"description" => $description,
				"member" => array_map("strtolower", $member),
				"icon" => $icon
			]
		);

		$info->setNested("price.perOne", $perOneFee);
		$info->setNested("price.subscriptions", $subsFee);
		$info->set("profit", 0);
		$info->save();
	}

	/**
	 * Publishes a newspaper.
	 *
	 * @param string $mainNewspaper
	 * @param string $newspaper
	 * @param string $description
	 * @param string $author
	 * @param int $generation
	 * @param array $contents
	 * @param bool|null $checkExpired
	 */
	public function publishNewspaper(string $mainNewspaper, string $newspaper, string $description, string $author, int $generation, array $contents, ?bool $checkExpired = true) {
		$basePath = $this->getNewspaperFolder() . "$mainNewspaper/newspaper/" . strtolower($newspaper);

		$newspaperInfo = new Config("$basePath.yml",
			Config::YAML,
			["name" => $newspaper,
				"description" => $description,
				"author" => $author,
				"generation" => $generation
			]
		);
		$newspaperData = new Config("$basePath.dat", Config::SERIALIZED, $contents);

		if($checkExpired) {
			$this->checkSubscriptions();
		}
		foreach(glob($this->getPlayersFolder() . "*.yml") as $playerDataPath) {
			$playerData = new Config($playerDataPath, Config::YAML);

			if(isset($playerData->getAll()["subscriptions"][$mainNewspaper])) {
				if(($subscriber = $this->getServer()->getPlayer($subscriberName = pathinfo($playerDataPath, PATHINFO_FILENAME)))->isOnline()) {
					$item = ItemFactory::fromString(ItemIds::WRITTEN_BOOK);
					$item->setCount(1);
					$item->setPages(($newspaperData->getAll()));
					$item->setTitle($newspaperInfo->get("name"));
					$item->setAuthor($newspaperInfo->get("author"));
					$item->setGeneration($newspaperInfo->get("generation"));

					if($subscriber->getInventory()->canAddItem($item)) {
						$subscriber->getInventory()->addItem($item);
						break;
					} else {
						$subscriber->sendMessage(TextFormat::GOLD . $this->getLanguage($this->getPlayerData($subscriberName)->get("lang"))->translateString("gui.publish.sub.info"));
					}

				}
				$key = "subscriptions.$mainNewspaper.queue";
				$queue = $playerData->getNested($key);
				$queue[] = strtolower($newspaper);
				$playerData->setNested($key, $queue);
				$playerData->save();
			}
		}
	}

	/**
	 * Returns newspaper information.
	 *
	 * @param string $newspaper
	 *
	 * @return Config
	 */
	public function getNewspaperInfo(string $newspaper) : Config {
		if(!file_exists($path = $this->getNewspaperFolder() . strtolower($newspaper) . "/info.yml")) {
			throw new \RuntimeException("Newspaper not found");
		}
		return new Config($path, Config::YAML);
	}

	/**
	 * Returns an array of path to all the newspaper information files.
	 *
	 * @return array
	 */
	public function getAllNewspaperInfo() : array {
		return glob($this->getNewspaperFolder() . "*/info.yml");
	}

	/**
	 * Returns the published newspaper for the given newspaper.
	 *
	 * @param string $newspaper
	 * @param string $published
	 *
	 * @return array
	*/
	public function getPublished(string $newspaper, string $published) : array {
		if(!file_exists(($path = $this->getNewspaperFolder() . strtolower($newspaper) . "/newspaper/" . $published) . ".yml")) {
			throw new \RuntimeException("Published newspaper info not found");
		}
		if(!file_exists("$path.dat")) {
			throw new \RuntimeException("Published newspaper data not found");
		}
		return [new Config("$path.yml", Config::YAML), new Config("$path.dat", Config::SERIALIZED)];
	}

	/**
	 * Returns an array of path to all the published newspapers for the given newspaper.
	 *
	 * @param string $newspaper
	 *
	 * @return array
	 */
	public function getAllPublished(string $newspaper) : array {
		if(!file_exists($this->getNewspaperFolder() . strtolower($newspaper))) {
			throw new \RuntimeException("Newspaper not found");
		}
		$escapedName = str_replace("[", "\[", $newspaper); //First checks for brackets
		$escapedName = str_replace("]", "\]", $escapedName);
		$escapedName = str_replace("\[", "[[]", $escapedName); //Second checks for brackets
		$escapedName = str_replace("\]", "[]]", $escapedName);
		return glob($this->getNewspaperFolder() . strtolower($escapedName) . "/newspaper/*.yml");
	}

	/**
	 * Sets the subscription status of the specified newspaper for the given player.
	 *
	 * @param string $player
	 * @param string $newspaper
	 * @param \DateTime $subscribeUntil
	 */
	public function setSubscription(string $player, string $newspaper, ?\DateTime $subscribeUntil = null) : void {
		if($subscribeUntil === null) {
			$subscribeUntil = (new \DateTime())->add(new \DateInterval("P1M"));
		}

		$playerData = $this->getPlayerData($player);
		$prefix = "subscriptions." . strtolower($newspaper);
		$playerData->setNested("$prefix.subscribeUntil", $subscribeUntil);
		$playerData->setNested("$prefix.queue", []);
		$playerData->save();
	}

	/**
	 * Returns the subscription status of the specified newspaper for the given player.
	 *
	 * @param string $player
	 * @param string $newspaper
	 *
	 * @return array
	 */
	public function getSubscription(string $player, string $newspaper) : array {
		return $this->getPlayerData($player)->getNested("subscriptions." . $newspaper);
	}

	/**
	 * Removes the subscription of the specified newspaper for the given player.
	 *
	 * @param string $player
	 * @param string $newspaper
	 */
	public function removeSubscription(string $player, string $newspaper) : void {
		$playerData = $this->getPlayerData($player);
		$playerData->removeNested("subscriptions." . $newspaper);
		$playerData->save();
	}

	/**
	 * Renews the subscription of the specified newspaper for the given player.
	 *
	 * @param string $player
	 * @param string $newspaper
	 */
	public function renewSubscription(string $player, string $newspaper) : void {
		if($this->getPlayerData($player)->get("autorenew")) {
			if($this->canBuyNewspapers() && ($API = Newspaper::getPlugin()->getEconomyAPI())->reduceMoney($player, $this->getNewspaperInfo($newspaper)->getNested("price.subscriptions"), true, "Newspaper") === $API::RET_INVALID) {
				$this->removeSubscription($player, $newspaper);
				return;
			}

			$this->setSubscription($player, $newspaper);
		} else {
			$this->removeSubscription($player, $newspaper);
		}
	}

	/**
	 * Checks subscriptions and performs actions.
	 *
	 * @param array|null $pathArray
	 */
	public function checkSubscriptions(?array $pathArray = null) {
		if($pathArray === null) {
			$pathArray = glob($this->getPlayersFolder() . "*.yml");
		}

		foreach($pathArray as $dataPath) {
			$playerData = new Config($dataPath, Config::YAML);

			foreach($this->getSubscriptionsArray($playerData->getAll()) as $subscription) {
				if(new \DateTime($playerData->getNested("subscriptions." . $subscription . ".subscribeUntil")) < new \DateTime()) {
					$this->renewSubscription(pathinfo($dataPath, PATHINFO_FILENAME), $subscription);
				}
			}
		}
	}

	/**
	 * Returns the player data for the given player.
	 *
	 * @param string $player
	 *
	 * @return Config
	 */
	public function getPlayerData(string $player) : Config {
		if(!file_exists($path = $this->getPlayersFolder() . strtolower($player) . ".yml")) {
			throw new \RuntimeException("Player data not found");
		}
		return new Config($path, Config::YAML);
	}

	/**
	 * Returns an array of subscriptions.
	 *
	 * @param $array
	 * @return array
	 */
	public function getSubscriptionsArray(array $array) : array {
		$result = [];
		unset($array["lang"]);
		unset($array["autorenew"]);
		foreach($array as $sub) {
			$result = array_merge($result, $sub);
		}
		return array_keys($result);
	}

	/**
	 * Returns the api of Economy plugin.
	 *
	 * @return Plugin|null
	 */
	public function getEconomyAPI() : ?Plugin {
		return Server::getInstance()->getPluginManager()->getPlugin("EconomyAPI");
	}

	/**
	 * Returns whether the players can buy newspapers (checks if Economy plugin exists).
	 *
	 * @return bool
	 */
	public function canBuyNewspapers() : bool {
		return $this->getEconomyAPI() !== null && $this->getEconomyAPI()->isEnabled();
	}

	/**
	 * Returns whether the given player has the permission, and sends the message if true.
	 *
	 * @param Player $player
	 * @param string $perm
	 * @param string $action
	 *
	 * @return bool
	 */
	public function badPerm(Player $player, string $perm, string $action = "main.perm.generic") : bool {
		if(!$player->hasPermission("newspaper." . $perm)) {
			$player->sendMessage(TextFormat::RED . $this->getLanguage($this->getPlayerData($player->getName())->get("lang"))->translateString("main.perm.base", ["%$action"]));
			return true;
		}
		return false;
	}

	/**
	 * Returns this class.
	 *
	 * @return Newspaper
	 */
	public static function getPlugin() : Newspaper {
		return Server::getInstance()->getPluginManager()->getPlugin("Newspaper");
	}

	/**
	 * Returns the path to the newspaper folder.
	 *
	 * @return string
	 */
	public function getNewspaperFolder() : string {
		return $this->newspaperFolder;
	}

	/**
	 * Returns the path to the players folder.
	 *
	 * @return string
	 */
	public function getPlayersFolder() : string {
		return $this->playersFolder;
	}

	/**
	 * Returns the path to the language files folder.
	 *
	 * @return string
	 */
	public function getLanguageFolder() : string {
		return $this->getFile() . "resources/lang/";
	}

	/**
	 * Returns BaseLang for the given language.
	 *
	 * @param string $lang
	 *
	 * @return BaseLang
	 */
	public function getLanguage(string $lang) : BaseLang {
		return $this->{"baseLang_$lang"};
	}

	/**
	 * Returns an array of path to all the language files.
	 *
	 * @return array
	 */
	public function getLanguageList() : array {
		$langList = []; //From PocketMine
		if(is_dir($this->getLanguageFolder())) {
			foreach(new \RecursiveIteratorIterator(new \RecursiveDirectoryIterator($this->getFile() . "resources/lang/")) as $langPath) {
				if($langPath->isFile()) {
					$path = str_replace(DIRECTORY_SEPARATOR, "/", substr((string) $langPath, strlen($this->getFile() . "resources/lang/")));
					$langList[$path] = $langPath;
				}
			}
		}

		return $langList;
	}
}
<?php
namespace Johnmacrocraft\Newspaper\libs\spoondetector;

use pocketmine\plugin\PluginBase;
use pocketmine\Server;

/**
 * This class is deliberately meant to be silly
 * Class SpoonDetector
 * @package falkirks\simplewarp\utils
 */
class SpoonDetector{

    private static $subtleAsciiSpoon = "   
         ___ _ __   ___   ___  _ __  
        / __| '_ \\ / _ \\ / _ \\| '_ \\ 
        \\__ \\ |_) | (_) | (_) | | | |
        |___/ .__/ \\___/ \\___/|_| |_|
            | |                      
            |_|                      
    ";

    private static $spoonTxtContent = "
    The author of this plugin does not provide support for third-party builds of 
    PocketMine-MP (spoons). Spoons detract from the overall quality of the MCPE plugin environment, which is already 
    lacking in quality. They force plugin developers to waste time trying to support conflicting APIs.
    
    In order to begin using this plugin you must understand that you will be offered no support. 
    
    Furthermore, the GitHub issue tracker for this project is targeted at vanilla PocketMine only. Any bugs you create which don't affect vanilla PocketMine, will be deleted.
    
    Have you read and understood the above (type 'yes' after the question mark)?";

    private static $thingsThatAreNotSpoons = [
        'PocketMine-MP'
    ];

    public static function isThisSpoon() : bool {
        return !in_array(Server::getInstance()->getName(), self::$thingsThatAreNotSpoons);
    }

    private static function contentValid(string $content): bool {
        return (strpos($content, self::$spoonTxtContent) !== false) && (strrpos($content, "yes") > strrpos($content, "?"));
    }

    public static function printSpoon(PluginBase $pluginBase, $fileToCheck){
        if(self::isThisSpoon()){
            if(!file_exists($pluginBase->getDataFolder() . $fileToCheck)){
                file_put_contents($pluginBase->getDataFolder() . $fileToCheck, self::$spoonTxtContent);
            }
            if(!self::contentValid(file_get_contents($pluginBase->getDataFolder() . $fileToCheck))) {
                $pluginBase->getLogger()->info(self::$subtleAsciiSpoon);
                $pluginBase->getLogger()->warning("You are attempting to run " . $pluginBase->getDescription()->getName() . " on a SPOON!");
                $pluginBase->getLogger()->warning("Before using the plugin you will need to open /plugins/" . $pluginBase->getDescription()->getName() . "/" . $fileToCheck . " in a text editor and agree to the terms.");
                $pluginBase->getServer()->getPluginManager()->disablePlugin($pluginBase);
            }
        }
    }

}
; NOTE: We use the word newspaper for the following two meanings: the newspaper office and the newspaper (reading).

; This string is used with ~.perm.* strings
main.perm.base=You don't have permission to {%0}
main.perm.generic=run this action
main.error.sub.invNoSpace=Some newspapers from the queue of {%0} couldn't be added to your inventory because you don't have enough space in it. They'll be in your queue until there's a space.

command.onlyPlayers=Only players can use this command

gui.buy.info.noFee=This server doesn't seem to use an economy system, so the price is not counted.

gui.buyinfo.title=Information for {%0}
gui.buyinfo.label.desc=Description: {%0}
gui.buyinfo.label.member=Member: {%0}
gui.buyinfo.label.priceOne=Price per one: {%0}
gui.buyinfo.label.priceSub=Subscription fee: {%0}
gui.buyinfo.button.buy=Buy for {%0}
gui.buyinfo.button.subscribe=Subscribe for {%0}
gui.buyinfo.perm.subscribe=subscribe to newspapers
gui.buyinfo.error.alreadySubscribe=You're already subscribing to this newspaper.
gui.buyinfo.error.noMoney="You don't have enough money to subscribe to this newspaper; you need {%0} more"
gui.buyinfo.info.invNoSpace=Your subscription was successful, but the newspapers couldn't be added to your inventory because you don't have enough space in it. They'll be added when you rejoin the server.
gui.buyinfo.success.subscribe=You just subscribed to the {%0}!

gui.buyitems.title=Select newspapers
gui.buyitems.label.noItems=Oops, it seems like this newspaper hasn't published any newspapers. Check back later!
gui.buyitems.info.cancelPurchase="No newspapers were selected; purchase canceled."
gui.buyitems.error.noMoney="You don't have enough money to buy this newspaper; you need {%0} more"
gui.buyitems.error.invNoSpace=You don't have enough space in your inventory to buy the selected item(s).
gui.buyitems.success.buy=You just purchased the {%0} for {%1}!

gui.create.title=Create...

gui.create.input.name.name=Name
gui.create.input.name.hint=Bunbunmaru Newspaper
gui.create.input.desc.name=Description
gui.create.input.desc.hint=A newspaper made by Shameimaru Aya
gui.create.input.member.name=Member of this newspaper team, use a comma for an array
gui.create.input.member.hint=ZUN, Shameimaru Aya
gui.create.input.iconURL.name=Icon URL
gui.create.input.priceOne.name=Price per one
gui.create.input.priceSub.name=Subscription fee
gui.create.error.alreadyExists=A newspaper with that name already exists.
gui.create.error.invalidName=The name of the newspaper cannot contain the following characters: \\, /, :, *, ?, ", <, >, |, and cannot be empty.
gui.create.success.create=Created a new newspaper!

gui.createtype.label=Do you want to create a new one, or publish a new version of the previous one?
gui.createtype.button.new=Create new
gui.createtype.button.publish=Publish
gui.createtype.perm.new=create new newspapers
gui.createtype.perm.publish=publish newspapers

gui.edit.title=Edit Newspaper...
gui.edit.success.edit=Edited the newspaper!

gui.itemlist.title=Buy/Read Newspaper
gui.itemlist.label=Here you can buy and read newspapers. Some of them might be free!
gui.itemlist.label.noItems=This server doesn't have any newspapers yet. Why don't you be the first newspaper?

gui.main.label=What do you want to do?
gui.main.button.create=Create newspapers
gui.main.button.buy=Buy/Read newspapers
gui.main.button.manage=Manage newspapers
gui.main.button.settings=Settings
gui.main.perm.create=create newspapers
gui.main.perm.buy=buy newspapers
gui.main.perm.manage=manage newspapers
gui.main.perm.settings=to manage settings and subscriptions

gui.manage.title=Manage Newspaper
gui.manage.label=Here you can manage newspapers.

gui.newspaperInfo.title=Information for {%0}
gui.newspaperInfo.label=Profit: {%0}
gui.newspaperInfo.button.edit=Edit newspaper
gui.newspaperInfo.button.getProfit=Get a salary
gui.newspaperinfo.perm.edit=edit newspapers
gui.newspaperinfo.perm.getProfit=receive a salary
gui.newspaperInfo.success.getProfit=You've received a salary! Don't forget to share it with your team's other members.

gui.subinfo.title=Subscription status
gui.subinfo.label.expiresAt=Expires at: {%0}
gui.subinfo.label.autorenew.enabled=Your settings are currently set to renew your subscriptions automatically when it expires.
gui.subinfo.label.autorenew.disabled=Your settings are currently not set to renew your subscriptions automatically when it expires.
gui.subinfo.button.unsub=Unsubscribe
gui.subinfo.perm.unsub=unsubscribe from newspapers
gui.subinfo.success.unsub=Unsubscribed from the newspaper!

gui.sub.title=My subscriptions
gui.sub.label=Here you can view the status of your subscriptions.

gui.publish.title=Publish Newspaper...
gui.publish.label=Note: For the newspaper, the item what you're currently holding will be used.
gui.publish.input.name.name=Name
gui.publish.input.desc.name=Description
gui.publish.input.desc.hint=Breaking news: Mojang finally removes Adler32 from Minecraft: Bedrock Edition
gui.publish.input.author.name=Author
gui.publish.input.author.hint=Third party devs
gui.publish.sub.info=There is a new newspaper from your subscriptions, but it couldn't be added to your inventory because you don't have enough space in it. It'll be in your queue until there's a space.
gui.publish.error.notBook=You are not holding a writable or written book!
gui.publish.success.publish=Published a new newspaper!

gui.publishitem.label=Which newspaper are you going to publish?

gui.settings.title=Settings
gui.settings.label=Here you can manage settings and your subscriptions.
gui.settings.button.settings=Settings
gui.settings.button.subscriptions=My subscriptions
gui.settings.perm.settings=to manage settings
gui.settings.perm.subscriptions=to check subscriptions

gui.settingslist.dropdown.lang.name=Language
gui.settingslist.toggle.autorenew.name=Automatically renew subscriptions
gui.settingslist.success.set=Successfully changed settings! Some of these changes may take effect after you rejoin the server.
; NOTE: We use the word newspaper for the following two meanings: the newspaper office and the newspaper (reading).

; This string is used with ~.perm.* strings
main.perm.base={%0}æ¨©éãããã¾ãã
main.perm.generic=ãã®ã¢ã¯ã·ã§ã³ãå®è¡ãã
main.error.sub.invNoSpace=ã¤ã³ãã³ããªã«ååãªã¹ãã¼ã¹ããªãã {%0} ã®ã­ã¥ã¼ã®ä¸é¨ã®æ°èãè¿½å ã§ãã¾ãããæ°èã¯ãã¹ãã¼ã¹ãããã¾ã§ã­ã¥ã¼ã«å¥ãã¾ãã

command.onlyPlayers=ãã¬ã¤ã¤ã¼ã®ã¿ãã®ã³ãã³ããä½¿ç¨ã§ãã¾ã

gui.buy.info.noFee=ãã®ãµã¼ãã¼ã¯ãçµæ¸ã·ã¹ãã ãä½¿ç¨ãã¦ããªããããªã®ã§ãä¾¡æ ¼ãè¨ç®ãã¾ããã

gui.buyinfo.title={%0} ã®æå ±
gui.buyinfo.label.desc=èª¬æï¼{%0}
gui.buyinfo.label.member=ã¡ã³ãã¼ï¼{%0}
gui.buyinfo.label.priceOne=ä¸åå½ããã®ä¾¡æ ¼ï¼{%0}
gui.buyinfo.label.priceSub=è³¼èª­æï¼{%0}
gui.buyinfo.button.buy={%0} ã§è³¼å¥
gui.buyinfo.button.subscribe={%0} ã§è³¼èª­
gui.buyinfo.perm.subscribe=æ°èãè³¼èª­ãã
gui.buyinfo.error.alreadySubscribe=ãã®æ°èãæ¢ã«è³¼èª­ãã¦ãã¾ãã
gui.buyinfo.error.noMoney=ãã®æ°èãè³¼èª­ããã®ã«ååãªãéãããã¾ããã{%0} ãå¿è¦ã§ã
gui.buyinfo.info.invNoSpace=è³¼èª­ã«æåãã¾ããããã¤ã³ãã³ããªã«ååãªã¹ãã¼ã¹ããªããæ°èãè¿½å ã§ãã¾ãããæ°èã¯ãããªãããµã¼ãã¼ã«åã³åå ããã¨è¿½å ããã¾ãã
gui.buyinfo.success.subscribe={%0} ãè³¼èª­ãã¾ããï¼

gui.buyitems.title=æ°èãé¸æ
gui.buyitems.label.noItems=ãã®æ°èã¯ãã¾ã ä½ãçºè¡ãã¦ããªãããã§ããå¾ã§ç¢ºèªãã¦ãã ããã
gui.buyitems.info.cancelPurchase=é¸æããæ°èããªãã®ã§è³¼å¥ãã­ã£ã³ã»ã«ããã¾ããã
gui.buyitems.error.noMoney=ãã®æ°èãè³¼å¥ããã®ã«ååãªãéãããã¾ããã{%0} ãå¿è¦ã§ã
gui.buyitems.error.invNoSpace=é¸æããé ç®ãè³¼å¥ããã®ã«ååãªã¹ãã¼ã¹ãã¤ã³ãã³ããªã«ããã¾ããã
gui.buyitems.success.buy={%0} ã {%1} ã§è³¼å¥ãã¾ããï¼

gui.create.title=ä½æâ¦

gui.create.input.name.name=åå
gui.create.input.name.hint=æããæ°è
gui.create.input.desc.name=èª¬æ
gui.create.input.desc.hint=å°å½ä¸¸æãä½ãæ°è
gui.create.input.member.name=ãã®æ°èãã¼ã ã®ã¡ã³ãã¼ã§ããéåã§ã¯ãèª­ç¹ãä½¿ç¨ãã¦ãã ãã
gui.create.input.member.hint=ZUNãå°å½ä¸¸æ
gui.create.input.iconURL.name=ã¢ã¤ã³ã³ã® URL
gui.create.input.priceOne.name=ä¸ã¤å½ããã®ä¾¡æ ¼
gui.create.input.priceSub.name=è³¼èª­æ
gui.create.error.alreadyExists=ãã®ååã®æ°èã¯æ¢ã«å­å¨ãã¾ãã
gui.create.error.invalidName=æ°èã®ååã¯ä»¥ä¸ã®æå­ï¼\\ã/ã:ã*ã?ã"ã<ã>ã|ï¼ãå«ãããã¨ãã§ãããç©ºæ¬ã«ã¯ã§ãã¾ããã
gui.create.success.create=æ°ããæ°èãä½æãã¾ããï¼

gui.createtype.label=æ°ããä½æãã¾ãããããã¨ãæ¢å­ã®ç©ã®æ°ãããã¼ã¸ã§ã³ãçºè¡ãã¾ããï¼
gui.createtype.button.new=æ°è¦ä½æ
gui.createtype.button.publish=çºè¡
gui.createtype.perm.new=æ°èãä½æãã
gui.createtype.perm.publish=æ°èãçºè¡ãã

gui.edit.title=æ°èãç·¨éâ¦
gui.edit.success.edit=æ°èãç·¨éãã¾ããï¼

gui.itemlist.title=æ°èãè³¼å¥ã»èª­ã
gui.itemlist.label=ããã§ã¯ãæ°èãè³¼å¥ãã¦èª­ããã¨ãã§ãã¾ãããã®ä¸­ä¸é¨ã¯ç¡æããâ¦ï¼
gui.itemlist.label.noItems=ãã®ãµã¼ãã¼ã«ã¯ãã¾ã æ°èç¤¾ãããã¾ãããæåã®æ°èç¤¾ã«ãªã£ã¦ã¿ã¦ã¯ã©ãã§ããï¼

gui.main.label=ä½ããããã§ããï¼
gui.main.button.create=æ°èãä½æ
gui.main.button.buy=æ°èãè³¼å¥ã»èª­ã
gui.main.button.manage=æ°èãç®¡ç
gui.main.button.settings=è¨­å®
gui.main.perm.create=æ°èãä½æãã
gui.main.perm.buy=æ°èãè³¼å¥ãã
gui.main.perm.manage=æ°èãç®¡çãã
gui.main.perm.settings=è¨­å®ã¨è³¼èª­ãç®¡çãã

gui.manage.title=æ°èãç®¡ç
gui.manage.label=ããã§ã¯ãæ°èãç®¡çã§ãã¾ãã

gui.newspaperInfo.title={%0} ã®æå ±
gui.newspaperInfo.label=åçï¼{%0}
gui.newspaperInfo.button.edit=æ°èãç·¨é
gui.newspaperInfo.button.getProfit=çµ¦ä¸ãåãåã
gui.newspaperinfo.perm.edit=æ°èãç·¨éãã
gui.newspaperinfo.perm.getProfit=çµ¦ä¸ãåãåããã¨ãã§ãã
gui.newspaperInfo.success.getProfit=çµ¦ä¸ãåãåãã¾ããï¼ãã¼ã ã®ä»ã®ã¡ã³ãã¼ã¨åãããã¨ãå¿ããªãã§ãã ããã

gui.subinfo.title=è³¼èª­ã®ã¹ãã¼ã¿ã¹
gui.subinfo.label.expiresAt=æºäºæ¥ï¼{%0}
gui.subinfo.label.autorenew.enabled=ããªãã®è¨­å®ã¯ãããªãã®è³¼èª­ãæºäºãããã¨èªåçã«æ´æ°ããããã«ç¾å¨è¨­å®ããã¦ãã¾ãã
gui.subinfo.label.autorenew.disabled=ããªãã®è¨­å®ã¯ãããªãã®è³¼èª­ãæºäºãããã¨èªåçã«æ´æ°ããªãããã«ç¾å¨è¨­å®ããã¦ãã¾ãã
gui.subinfo.button.unsub=è³¼èª­ãã­ã£ã³ã»ã«
gui.subinfo.perm.unsub=æ°èã®è³¼èª­ãã­ã£ã³ã»ã«ãã
gui.subinfo.success.unsub=æ°èã®è³¼èª­ãã­ã£ã³ã»ã«ãã¾ããï¼

gui.sub.title=ç§ã®è³¼èª­
gui.sub.label=ããã§ã¯ãããªãã®è³¼èª­ã®ã¹ãã¼ã¿ã¹ãè¦ããã¨ãã§ãã¾ãã

gui.publish.title=æ°èãçºè¡â¦
gui.publish.label=ãã¼ãï¼æ°èã§ã¯ãæã«æã£ã¦ããã¢ã¤ãã ãä½¿ç¨ããã¾ãã
gui.publish.input.name.name=åå
gui.publish.input.desc.name=èª¬æ
gui.publish.input.desc.hint=éå ±ï¼Mojangãã¤ãã« Minecraft: Bedrock Edition ã§ Adler32 ãé¤å»
gui.publish.input.author.name=ä½æè
gui.publish.input.author.hint=ãµã¼ããã¼ãã£éçºè
gui.publish.sub.info=ããªãã®è³¼èª­ã§æ°ããæ°èãããã¾ãããã¤ã³ãã³ããªã«ååãªã¹ãã¼ã¹ããªããæ°èãè¿½å ã§ãã¾ãããæ°èã¯ãã¹ãã¼ã¹ãããã¾ã§ã­ã¥ã¼ã«å¥ãã¾ãã
gui.publish.error.notBook=æ¸ããã¨ãã§ããæ¬ãæ¸ãããæ¬ãæã«æã£ã¦ãã¾ããï¼
gui.publish.success.publish=æ°ããæ°èãçºè¡ãã¾ããï¼

gui.publishitem.label=ã©ã®æ°èãçºè¡ãã¾ããï¼

gui.settings.title=è¨­å®
gui.settings.label=ããã§ã¯ãè¨­å®ã¨ããªãã®è³¼èª­ãç®¡çã§ãã¾ãã
gui.settings.button.settings=è¨­å®
gui.settings.button.subscriptions=ç§ã®è³¼èª­
gui.settings.perm.settings=è¨­å®ãç®¡çãã
gui.settings.perm.subscriptions=è³¼èª­ãç¢ºèªãã

gui.settingslist.dropdown.lang.name=è¨èª
gui.settingslist.toggle.autorenew.name=è³¼èª­ãèªåçã«æ´æ°
gui.settingslist.success.set=è¨­å®ãå¤æ´ãã¾ããããããã®å¤æ´ã®ä¸é¨ã¯ããµã¼ãã¼ã«åã³åå ããå¾ã«é©ç¨ãããå ´åãããã¾ãã
; NOTE: We use the word newspaper for the following two meanings: the newspaper office and the newspaper (reading).

; This string is used with ~.perm.* strings
main.perm.base={%0} ì ìë ê¶íì´ ììµëë¤
main.perm.generic=ì´ ììì ì¤íí 
main.error.sub.invNoSpace=ë³´ê´í¨ì ì¶©ë¶í ê³µê°ì´ ìì´ì {%0}ì ëê¸°ì´ì ì¼ë¶ ì ë¬¸ì ì¶ê°í  ì ììµëë¤. ì ë¬¸ì ê³µê°ì´ ìì ëê¹ì§ ëê¸°ì´ì ìê² ë©ëë¤.

command.onlyPlayers=íë ì´ì´ë§ ì´ ëªë ¹ì´ë¥¼ ì¬ì©í  ì ììµëë¤

gui.buy.info.noFee=ì´ ìë²ë ê²½ì  ìì¤íì ì¬ì©íë ê² ê°ì§ ìê¸°ì ê°ê²©ì ê³ì°íì§ ììµëë¤.

gui.buyinfo.title={%0}ì ì ë³´
gui.buyinfo.label.desc=ì¤ëª: {%0}
gui.buyinfo.label.member=êµ¬ì±ì: {%0}
gui.buyinfo.label.priceOne=í ê°ë¹ ê°ê²©: {%0}
gui.buyinfo.label.priceSub=êµ¬ëë£: {%0}
gui.buyinfo.button.buy={%0}(ì¼)ë¡ êµ¬ì
gui.buyinfo.button.subscribe={%0}(ì¼)ë¡ êµ¬ë
gui.buyinfo.perm.subscribe=ì ë¬¸ì êµ¬ëí 
gui.buyinfo.error.alreadySubscribe=ì´ë¯¸ ì´ ì ë¬¸ì êµ¬ëíê³  ììµëë¤.
gui.buyinfo.error.noMoney=ì´ ì ë¬¸ì êµ¬ëíê¸°ì ì¶©ë¶í ê¸ì¡ì´ ììµëë¤, {%0}ì´(ê°) ë íìí©ëë¤
gui.buyinfo.info.invNoSpace=êµ¬ëì ì±ê³µì ì´ìì§ë§, ë³´ê´í¨ì ì¶©ë¶í ê³µê°ì´ ìì´ì ì ë¬¸ì ì¶ê°í  ì ììµëë¤. ì ë¬¸ì ìë²ì ë¤ì ì°¸ì¬íë©´ ì¶ê°ë©ëë¤.
gui.buyinfo.success.subscribe={%0}ì(ë¥¼) êµ¬ëíìµëë¤!

gui.buyitems.title=ì ë¬¸ ì í
gui.buyitems.label.noItems=ì´ë°, ì´ ì ë¬¸ì¬ë ìë¬´ ì ë¬¸ë ë°ííì§ ìì ê² ê°ë¤ì. ëì¤ì ë¤ì íì¸í´ë³´ì¸ì!
gui.buyitems.info.cancelPurchase=ì íí ì ë¬¸ì´ ìê¸°ì êµ¬ìì´ ì·¨ìëììµëë¤.
gui.buyitems.error.noMoney=ì´ ì ë¬¸ì êµ¬ìíê¸°ì ì¶©ë¶í ê¸ì¡ì´ ììµëë¤, {%0}ì´(ê°) ë íìí©ëë¤
gui.buyitems.error.invNoSpace=ì íí í­ëª©ì êµ¬ìíê¸°ì ì¶©ë¶í ê³µê°ì´ ë³´ê´í¨ì ììµëë¤.
gui.buyitems.success.buy={%0}ì(ë¥¼) {%1}(ì¼)ë¡ êµ¬ìíìµëë¤!

gui.create.title=ë§ë¤ê¸°...

gui.create.input.name.name=ì´ë¦
gui.create.input.name.hint=ë¶ë¶ë§ë£¨ ì ë¬¸
gui.create.input.desc.name=ì¤ëª
gui.create.input.desc.hint=ì¤ë©ì´ë§ë£¨ ìì¼ê° ë§ëë ì ë¬¸
gui.create.input.member.name=ì´ ì ë¬¸íì êµ¬ì±ììëë¤, ë°°ì´ë¡ë ì¼íë¥¼ ì¬ì©íì¸ì
gui.create.input.member.hint=ZUN, ì¤ë©ì´ë§ë£¨ ìì¼
gui.create.input.iconURL.name=ìì´ì½ URL
gui.create.input.priceOne.name=í ê°ë¹ ê°ê²©
gui.create.input.priceSub.name=êµ¬ëë£
gui.create.error.alreadyExists=í´ë¹ ì´ë¦ì ì ë¬¸ì´ ì´ë¯¸ ì¡´ì¬í©ëë¤.
gui.create.error.invalidName=ì ë¬¸ì ì´ë¦ì ë¤ì ê¸ìë¤(\\, /, :, *, ?, ", <, >, |)ì í¬í¨í  ì ìì¼ë©°, ë¹ìë ì ììµëë¤.
gui.create.success.create=ìë¡ì´ ì ë¬¸ì ë§ë¤ììµëë¤!

gui.createtype.label=ìë¡ ë§ëìê² ìµëê¹, ìëë©´ ê¸°ì¡´ ê²ì ìë¡ì´ ë²ì ì ë°ííìê² ìµëê¹?
gui.createtype.button.new=ìë¡ ë§ë¤ê¸°
gui.createtype.button.publish=ë°í
gui.createtype.perm.new=ìë¡ì´ ì ë¬¸ì ë§ë¤
gui.createtype.perm.publish=ì ë¬¸ì ë°íí 

gui.edit.title=ì ë¬¸ ìì ...
gui.edit.success.edit=ì ë¬¸ì ìì íìµëë¤!

gui.itemlist.title=ì ë¬¸ êµ¬ì/ì½ê¸°
gui.itemlist.label=ì¬ê¸°ìë ì ë¬¸ì êµ¬ìíê³  ì½ì ì ììµëë¤. ê·¸ì¤ ì¼ë¶ë ë¬´ë£ì¼ì§ë...?
gui.itemlist.label.noItems=ì´ ìë²ìë ìì§ ì ë¬¸ì¬ê° ììµëë¤. ì²« ë²ì§¸ ì ë¬¸ì¬ê° ëì´ ë³´ìë ê±´ ì´ë¤ê°ì?

gui.main.label=ë¬´ìì íìê² ì´ì?
gui.main.button.create=ìë¡ì´ ì ë¬¸ ë§ë¤ê¸°
gui.main.button.buy=ì ë¬¸ êµ¬ì/ì½ê¸°
gui.main.button.manage=ì ë¬¸ ê´ë¦¬
gui.main.button.settings=ì¤ì 
gui.main.perm.create=ì ë¬¸ì ë§ë¤
gui.main.perm.buy=ì ë¬¸ì êµ¬ìí 
gui.main.perm.manage=ì ë¬¸ì ê´ë¦¬í 
gui.main.perm.settings=ì¤ì ê³¼ êµ¬ëì ê´ë¦¬í 

gui.manage.title=ì ë¬¸ ê´ë¦¬
gui.manage.label=ì¬ê¸°ìë ì ë¬¸ì ê´ë¦¬í  ì ììµëë¤.

gui.newspaperInfo.title={%0}ì ì ë³´
gui.newspaperInfo.label=ììµ: {%0}
gui.newspaperInfo.button.edit=ì ë¬¸ í¸ì§
gui.newspaperInfo.button.getProfit=ê¸ì¬ ë°ê¸°
gui.newspaperinfo.perm.edit=ì ë¬¸ì í¸ì§í 
gui.newspaperinfo.perm.getProfit=ê¸ì¬ë¥¼ ë°ì
gui.newspaperInfo.success.getProfit=ê¸ì¬ë¥¼ ë°ììµëë¤! íì ë¤ë¥¸ êµ¬ì±ìë¤ê³¼ ëëë ê² ìì§ ë§ì¸ì.

gui.subinfo.title=êµ¬ë ìí
gui.subinfo.label.expiresAt=ë§ë£ ë ì§: {%0}
gui.subinfo.label.autorenew.enabled=ì¤ì ì´ êµ¬ëì´ ë§ë£ëë©´ ìëì¼ë¡ ê°±ì íëë¡ íì¬ ì¤ì ëì´ ììµëë¤.
gui.subinfo.label.autorenew.disabled=ì¤ì ì´ êµ¬ëì´ ë§ë£ëë©´ ìëì¼ë¡ ê°±ì íì§ ìëë¡ íì¬ ì¤ì ëì´ ììµëë¤.
gui.subinfo.button.unsub=êµ¬ë ì·¨ì
gui.subinfo.perm.unsub=ì ë¬¸ì êµ¬ëì ì·¨ìí 
gui.subinfo.success.unsub=ì ë¬¸ì êµ¬ëì ì·¨ìíìµëë¤!

gui.sub.title=ë´ êµ¬ë
gui.sub.label=ì¬ê¸°ìë ì¬ì©ìì êµ¬ë ìíë¥¼ ë³¼ ì ììµëë¤.

gui.publish.title=ì ë¬¸ ë°í...
gui.publish.label=ì°¸ê³ : ì ë¬¸ì¼ë¡ë íì¬ ì¬ì©ìê° ë¤ê³  ìë ìì´íì´ ì¬ì©ë©ëë¤.
gui.publish.input.name.name=ì´ë¦
gui.publish.input.desc.name=ì¤ëª
gui.publish.input.desc.hint=ìë³´: Mojang, ëëì´ Minecraft: Bedrock Editionìì Adler32 ì ê±°
gui.publish.input.author.name=ìì±ì
gui.publish.input.author.hint=ì 3ì ê°ë°ì
gui.publish.sub.info=ì¬ì©ìì êµ¬ëìì ìë¡ì´ ì ë¬¸ì´ ìì§ë§, ë³´ê´í¨ì ì¶©ë¶í ê³µê°ì´ ìì´ì ì ë¬¸ì ì¶ê°í  ì ììµëë¤. ì ë¬¸ì ê³µê°ì´ ìì ëê¹ì§ ëê¸°ì´ì ìê² ë©ëë¤.
gui.publish.error.notBook=ì¸ ì ìê±°ë ì¨ì§ ì±ì ë¤ê³  ìì§ ììµëë¤!
gui.publish.success.publish=ìë¡ì´ ì ë¬¸ì ë°ííìµëë¤!

gui.publishitem.label=ì´ë¤ ì ë¬¸ì ë°ííìê² ìµëê¹?

gui.settings.title=ì¤ì 
gui.settings.label=ì¬ê¸°ìë ì¤ì ê³¼ ì¬ì©ìì êµ¬ëì ê´ë¦¬í  ì ììµëë¤.
gui.settings.button.settings=ì¤ì 
gui.settings.button.subscriptions=ë´ êµ¬ë
gui.settings.perm.settings=ì¤ì ì ê´ë¦¬í 
gui.settings.perm.subscriptions=êµ¬ëì íì¸í 

gui.settingslist.dropdown.lang.name=ì¸ì´
gui.settingslist.toggle.autorenew.name=êµ¬ëì ìëì¼ë¡ ê°±ì 
gui.settingslist.success.set=ì¤ì ì ì±ê³µì ì¼ë¡ ë³ê²½íìµëë¤! ì´ ë³ê²½ ì¬í­ë¤ ì¤ ì¼ë¶ë ìë²ì ë¤ì ì°¸ì¬í íì ì ì©ë  ìë ììµëë¤.
<?php

/*
 *
 * Newspaper
 *
 * Copyright Â© 2018 Johnmacrocraft
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 */

namespace Johnmacrocraft\Newspaper\tasks;

use Johnmacrocraft\Newspaper\Newspaper;
use pocketmine\scheduler\Task;

class CheckSubscriptionsTask extends Task {

	/** @var Newspaper */
	private $plugin;

	public function __construct(Newspaper $plugin) {
		$this->plugin = $plugin;
	}

	public function onRun(int $currentTick) {
		$this->plugin->checkSubscriptions();
	}
}
<?php

/*
 *
 * Newspaper
 *
 * Copyright Â© 2018 Johnmacrocraft
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 */

namespace Johnmacrocraft\Newspaper\forms;

use Johnmacrocraft\Newspaper\Newspaper;
use Johnmacrocraft\Newspaper\libs\dktapps\pmforms\MenuForm;
use Johnmacrocraft\Newspaper\libs\dktapps\pmforms\MenuOption;
use pocketmine\lang\BaseLang;
use pocketmine\Player;

class MainForm extends MenuForm {

	/** @var BaseLang */
	private $lang;

	public function __construct(string $playerName) {
		$this->lang = Newspaper::getPlugin()->getLanguage(Newspaper::getPlugin()->getPlayerData($playerName)->get("lang"));
		parent::__construct("Newspaper",
			$this->lang->translateString("gui.main.label"),
			[new MenuOption($this->lang->translateString("gui.main.button.create")),
				new MenuOption($this->lang->translateString("gui.main.button.buy")),
				new MenuOption($this->lang->translateString("gui.main.button.manage")),
				new MenuOption($this->lang->translateString("gui.main.button.settings"))
			],
			function(Player $player, int $selectedOption) : void {
				if($selectedOption === 0) {
					if(!Newspaper::getPlugin()->badPerm($player, "gui.create", "gui.main.perm.create")) {
						$player->sendForm(new CreateTypeForm($this->lang));
					}
				} elseif($selectedOption === 1) {
					if(!Newspaper::getPlugin()->badPerm($player, "gui.buy", "gui.main.perm.buy")) {
						$player->sendForm(new ItemListForm($this->lang));
					}
				} elseif($selectedOption === 2) {
					if(!Newspaper::getPlugin()->badPerm($player, "gui.manage", "gui.main.perm.manage")) {
						$player->sendForm(new ManageForm($player->getLowerCaseName(), $this->lang));
					}
				} elseif($selectedOption === 3) {
					if(!Newspaper::getPlugin()->badPerm($player, "gui.settings", "gui.main.perm.settings")) {
						$player->sendForm(new SettingsForm($this->lang));
					}
				}
			}
		);
	}
}<?php

/*
 *
 *  ____            _        _   __  __ _                  __  __ ____
 * |  _ \ ___   ___| | _____| |_|  \/  (_)_ __   ___      |  \/  |  _ \
 * | |_) / _ \ / __| |/ / _ \ __| |\/| | | '_ \ / _ \_____| |\/| | |_) |
 * |  __/ (_) | (__|   <  __/ |_| |  | | | | | |  __/_____| |  | |  __/
 * |_|   \___/ \___|_|\_\___|\__|_|  |_|_|_| |_|\___|     |_|  |_|_|
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * @author PocketMine Team
 * @link http://www.pocketmine.net/
 *
 *
*/

declare(strict_types=1);

namespace Johnmacrocraft\Newspaper\libs\dktapps\pmforms;

use pocketmine\form\FormValidationException;
use pocketmine\Player;
use pocketmine\utils\Utils;

/**
 * This form type presents a menu to the user with a list of options on it. The user may select an option or close the
 * form by clicking the X in the top left corner.
 */
abstract class MenuForm extends BaseForm{

	/** @var string */
	protected $content;
	/** @var MenuOption[] */
	private $options;
	/** @var \Closure */
	private $onSubmit;
	/** @var \Closure|null */
	private $onClose = null;

	/**
	 * @param string        $title
	 * @param string        $text
	 * @param MenuOption[]  $options
	 * @param \Closure      $onSubmit signature `function(Player $player, int $selectedOption)`
	 * @param \Closure|null $onClose signature `function(Player $player)`
	 */
	public function __construct(string $title, string $text, array $options, \Closure $onSubmit, ?\Closure $onClose = null){
		parent::__construct($title);
		$this->content = $text;
		$this->options = array_values($options);
		Utils::validateCallableSignature(function(Player $player, int $selectedOption) : void{}, $onSubmit);
		$this->onSubmit = $onSubmit;
		if($onClose !== null){
			Utils::validateCallableSignature(function(Player $player) : void{}, $onClose);
			$this->onClose = $onClose;
		}
	}

	public function getOption(int $position) : ?MenuOption{
		return $this->options[$position] ?? null;
	}

	final public function handleResponse(Player $player, $data) : void{
		if($data === null){
			if($this->onClose !== null){
				($this->onClose)($player);
			}
		}elseif(is_int($data)){
			if(!isset($this->options[$data])){
				throw new FormValidationException("Option $data does not exist");
			}
			($this->onSubmit)($player, $data);
		}else{
			throw new FormValidationException("Expected int or null, got " . gettype($data));
		}
	}

	protected function getType() : string{
		return "form";
	}

	protected function serializeFormData() : array{
		return [
			"content" => $this->content,
			"buttons" => $this->options //yes, this is intended (MCPE calls them buttons)
		];
	}
}
<?php

/*
 *
 *  ____            _        _   __  __ _                  __  __ ____
 * |  _ \ ___   ___| | _____| |_|  \/  (_)_ __   ___      |  \/  |  _ \
 * | |_) / _ \ / __| |/ / _ \ __| |\/| | | '_ \ / _ \_____| |\/| | |_) |
 * |  __/ (_) | (__|   <  __/ |_| |  | | | | | |  __/_____| |  | |  __/
 * |_|   \___/ \___|_|\_\___|\__|_|  |_|_|_| |_|\___|     |_|  |_|_|
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * @author PocketMine Team
 * @link http://www.pocketmine.net/
 *
 *
*/

declare(strict_types=1);

/**
 * API for Minecraft: Bedrock custom UI (forms)
 */
namespace Johnmacrocraft\Newspaper\libs\dktapps\pmforms;

use pocketmine\form\Form;

/**
 * Base class for a custom form. Forms are serialized to JSON data to be sent to clients.
 */
abstract class BaseForm implements Form{

	/** @var string */
	protected $title;

	public function __construct(string $title){
		$this->title = $title;
	}

	/**
	 * Returns the text shown on the form title-bar.
	 * @return string
	 */
	public function getTitle() : string{
		return $this->title;
	}

	/**
	 * Serializes the form to JSON for sending to clients.
	 *
	 * @return array
	 */
	final public function jsonSerialize() : array{
		$ret = $this->serializeFormData();
		$ret["type"] = $this->getType();
		$ret["title"] = $this->getTitle();

		return $ret;
	}

	/**
	 * Returns the type used to show this form to clients
	 * @return string
	 */
	abstract protected function getType() : string;

	/**
	 * Serializes additional data needed to show this form to clients.
	 * @return array
	 */
	abstract protected function serializeFormData() : array;

}
<?php

/*
 *
 *  ____            _        _   __  __ _                  __  __ ____
 * |  _ \ ___   ___| | _____| |_|  \/  (_)_ __   ___      |  \/  |  _ \
 * | |_) / _ \ / __| |/ / _ \ __| |\/| | | '_ \ / _ \_____| |\/| | |_) |
 * |  __/ (_) | (__|   <  __/ |_| |  | | | | | |  __/_____| |  | |  __/
 * |_|   \___/ \___|_|\_\___|\__|_|  |_|_|_| |_|\___|     |_|  |_|_|
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * @author PocketMine Team
 * @link http://www.pocketmine.net/
 *
 *
*/

declare(strict_types=1);

namespace Johnmacrocraft\Newspaper\libs\dktapps\pmforms;

/**
 * Represents an option on a MenuForm. The option is shown as a button and may optionally have an image next to it.
 */
class MenuOption implements \JsonSerializable{

	/**
	 * @var string
	 */
	private $text;
	/**
	 * @var FormIcon|null
	 */
	private $image;

	public function __construct(string $text, ?FormIcon $image = null){
		$this->text = $text;
		$this->image = $image;
	}

	public function getText() : string{
		return $this->text;
	}

	public function hasImage() : bool{
		return $this->image !== null;
	}

	public function getImage() : ?FormIcon{
		return $this->image;
	}

	public function jsonSerialize(){
		$json = [
			"text" => $this->text
		];

		if($this->hasImage()){
			$json["image"] = $this->image;
		}

		return $json;
	}
}
<?php

/*
 *
 * Newspaper
 *
 * Copyright Â© 2018 Johnmacrocraft
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 */

namespace Johnmacrocraft\Newspaper\forms;

use Johnmacrocraft\Newspaper\Newspaper;
use Johnmacrocraft\Newspaper\libs\dktapps\pmforms\MenuForm;
use Johnmacrocraft\Newspaper\libs\dktapps\pmforms\MenuOption;
use pocketmine\lang\BaseLang;
use pocketmine\Player;

class CreateTypeForm extends MenuForm {

	/** @var BaseLang */
	private $lang;

	public function __construct(BaseLang $lang) {
		$this->lang = $lang;
		parent::__construct($lang->translateString("gui.create.title"),
			$lang->translateString("gui.createtype.label"),
			[new MenuOption($lang->translateString("gui.createtype.button.new")), new MenuOption($lang->translateString("gui.createtype.button.publish"))],
			function(Player $player, int $selectedOption) : void {
				if($selectedOption === 0) {
					if(!Newspaper::getPlugin()->badPerm($player, "gui.create.new", "gui.createtype.perm.new")) {
						$player->sendForm(new CreateForm($this->lang));
					}
				} elseif($selectedOption === 1) {
					if(!Newspaper::getPlugin()->badPerm($player, "gui.create.publish", "gui.createtype.perm.publish")) {
						$player->sendForm(new PublishItemForm($player->getLowerCaseName(), $this->lang));
					}
				}
			}
		);
	}
}<?php

/*
 *
 * Newspaper
 *
 * Copyright Â© 2018 Johnmacrocraft
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 */

namespace Johnmacrocraft\Newspaper\forms;

use Johnmacrocraft\Newspaper\Newspaper;
use Johnmacrocraft\Newspaper\libs\dktapps\pmforms\CustomForm;
use Johnmacrocraft\Newspaper\libs\dktapps\pmforms\CustomFormResponse;
use Johnmacrocraft\Newspaper\libs\dktapps\pmforms\element\Input;
use pocketmine\lang\BaseLang;
use pocketmine\Player;
use pocketmine\utils\TextFormat;

class CreateForm extends CustomForm {

	/** @var BaseLang */
	private $lang;

	public function __construct(BaseLang $lang) {
		$this->lang = $lang;
		parent::__construct($lang->translateString("gui.create.title"),
			[new Input("Name", $lang->translateString("gui.create.input.name.name"), $lang->translateString("gui.create.input.name.hint")),
				new Input("Description", $lang->translateString("gui.create.input.desc.name"), $lang->translateString("gui.create.input.desc.hint")),
				new Input("Member", $lang->translateString("gui.create.input.member.name"), $lang->translateString("gui.create.input.member.hint")),
				new Input("Icon", $lang->translateString("gui.create.input.iconURL.name"), "https://en.touhouwiki.net/images/b/b4/Th16Aya.png"),
				new Input("Price_PerOne", $lang->translateString("gui.create.input.priceOne.name"), "0"),
				new Input("Price_Subscription", $lang->translateString("gui.create.input.priceSub.name"), "0")
			],
			function(Player $player, CustomFormResponse $data) : void {
				if(is_dir(Newspaper::getPlugin()->getNewspaperFolder() . strtolower($newspaper = $data->getString("Name")))) {
					$player->sendMessage(TextFormat::RED . $this->lang->translateString("gui.create.error.alreadyExists"));
				} else {
					if(strpbrk($newspaper, "\\/:*?\"<>|") === FALSE && !empty($newspaper)) { //We don't want people trying to use invalid characters on Windows system, or access parent directories
						Newspaper::getPlugin()->createNewspaper($newspaper,
							$data->getString("Description"),
							(empty($member = $data->getString("Member")) || !in_array($player->getLowerCaseName(), $memberArray = explode(", ", $member)) ? [$player->getLowerCaseName()] : $memberArray),
							$data->getString("Icon"),
							(int) $data->getString("Price_PerOne"),
							(int) $data->getString("Price_Subscription")
						);

						$player->sendMessage(TextFormat::GREEN . $this->lang->translateString("gui.create.success.create"));
					} else {
						$player->sendMessage(TextFormat::RED . $this->lang->translateString("gui.create.error.invalidName"));
					}
				}
			}
		);
	}
}
<?php

/*
 *
 *  ____            _        _   __  __ _                  __  __ ____
 * |  _ \ ___   ___| | _____| |_|  \/  (_)_ __   ___      |  \/  |  _ \
 * | |_) / _ \ / __| |/ / _ \ __| |\/| | | '_ \ / _ \_____| |\/| | |_) |
 * |  __/ (_) | (__|   <  __/ |_| |  | | | | | |  __/_____| |  | |  __/
 * |_|   \___/ \___|_|\_\___|\__|_|  |_|_|_| |_|\___|     |_|  |_|_|
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * @author PocketMine Team
 * @link http://www.pocketmine.net/
 *
 *
*/

declare(strict_types=1);

namespace Johnmacrocraft\Newspaper\libs\dktapps\pmforms;

use Johnmacrocraft\Newspaper\libs\dktapps\pmforms\element\CustomFormElement;
use pocketmine\form\FormValidationException;
use pocketmine\Player;
use pocketmine\utils\Utils;

abstract class CustomForm extends BaseForm{

	/** @var CustomFormElement[] */
	private $elements;
	/** @var CustomFormElement[] */
	private $elementMap = [];
	/** @var \Closure */
	private $onSubmit;
	/** @var \Closure|null */
	private $onClose = null;

	/**
	 * @param string              $title
	 * @param CustomFormElement[] $elements
	 * @param \Closure            $onSubmit signature `function(Player $player, CustomFormResponse $data)`
	 * @param \Closure|null       $onClose signature `function(Player $player)`
	 *
	 * @throws \InvalidArgumentException
	 */
	public function __construct(string $title, array $elements, \Closure $onSubmit, ?\Closure $onClose = null){
		parent::__construct($title);
		$this->elements = array_values($elements);
		foreach($this->elements as $element){
			if(isset($this->elements[$element->getName()])){
				throw new \InvalidArgumentException("Multiple elements cannot have the same name, found \"" . $element->getName() . "\" more than once");
			}
			$this->elementMap[$element->getName()] = $element;
		}

		Utils::validateCallableSignature(function(Player $player, CustomFormResponse $response) : void{}, $onSubmit);
		$this->onSubmit = $onSubmit;
		if($onClose !== null){
			Utils::validateCallableSignature(function(Player $player) : void{}, $onClose);
			$this->onClose = $onClose;
		}
	}

	/**
	 * @param int $index
	 *
	 * @return CustomFormElement|null
	 */
	public function getElement(int $index) : ?CustomFormElement{
		return $this->elements[$index] ?? null;
	}

	/**
	 * @param string $name
	 *
	 * @return null|CustomFormElement
	 */
	public function getElementByName(string $name) : ?CustomFormElement{
		return $this->elementMap[$name] ?? null;
	}

	/**
	 * @return CustomFormElement[]
	 */
	public function getAllElements() : array{
		return $this->elements;
	}

	final public function handleResponse(Player $player, $data) : void{
		if($data === null){
			if($this->onClose !== null){
				($this->onClose)($player);
			}
		}elseif(is_array($data)){
			if(($actual = count($data)) !== ($expected = count($this->elements))){
				throw new FormValidationException("Expected $expected result data, got $actual");
			}

			$values = [];

			/** @var array $data */
			foreach($data as $index => $value){
				if(!isset($this->elements[$index])){
					throw new FormValidationException("Element at offset $index does not exist");
				}
				$element = $this->elements[$index];
				try{
					$element->validateValue($value);
				}catch(FormValidationException $e){
					throw new FormValidationException("Validation failed for element \"" . $element->getName() . "\": " . $e->getMessage(), 0, $e);
				}
				$values[$element->getName()] = $value;
			}

			($this->onSubmit)($player, new CustomFormResponse($values));
		}else{
			throw new FormValidationException("Expected array or null, got " . gettype($data));
		}
	}

	/**
	 * @return string
	 */
	protected function getType() : string{
		return "custom_form";
	}

	protected function serializeFormData() : array{
		return [
			"content" => $this->elements
		];
	}
}
<?php

/*
 *
 *  ____            _        _   __  __ _                  __  __ ____
 * |  _ \ ___   ___| | _____| |_|  \/  (_)_ __   ___      |  \/  |  _ \
 * | |_) / _ \ / __| |/ / _ \ __| |\/| | | '_ \ / _ \_____| |\/| | |_) |
 * |  __/ (_) | (__|   <  __/ |_| |  | | | | | |  __/_____| |  | |  __/
 * |_|   \___/ \___|_|\_\___|\__|_|  |_|_|_| |_|\___|     |_|  |_|_|
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * @author PocketMine Team
 * @link http://www.pocketmine.net/
 *
 *
*/

declare(strict_types=1);

namespace Johnmacrocraft\Newspaper\libs\dktapps\pmforms\element;

use pocketmine\form\FormValidationException;

/**
 * Element which accepts text input. The text-box can have a default value, and may also have a text hint when there is
 * no text in the box.
 */
class Input extends CustomFormElement{

	/** @var string */
	private $hint;
	/** @var string */
	private $default;

	/**
	 * @param string $name
	 * @param string $text
	 * @param string $hintText
	 * @param string $defaultText
	 */
	public function __construct(string $name, string $text, string $hintText = "", string $defaultText = ""){
		parent::__construct($name, $text);
		$this->hint = $hintText;
		$this->default = $defaultText;
	}

	public function getType() : string{
		return "input";
	}

	/**
	 * @param string $value
	 *
	 * @throws FormValidationException
	 */
	public function validateValue($value) : void{
		if(!is_string($value)){
			throw new FormValidationException("Expected string, got " . gettype($value));
		}
	}

	/**
	 * Returns the text shown in the text-box when the box is not focused and there is no text in it.
	 * @return string
	 */
	public function getHintText() : string{
		return $this->hint;
	}

	/**
	 * Returns the text which will be in the text-box by default.
	 * @return string
	 */
	public function getDefaultText() : string{
		return $this->default;
	}

	protected function serializeElementData() : array{
		return [
			"placeholder" => $this->hint,
			"default" => $this->default
		];
	}
}
<?php

/*
 *
 *  ____            _        _   __  __ _                  __  __ ____
 * |  _ \ ___   ___| | _____| |_|  \/  (_)_ __   ___      |  \/  |  _ \
 * | |_) / _ \ / __| |/ / _ \ __| |\/| | | '_ \ / _ \_____| |\/| | |_) |
 * |  __/ (_) | (__|   <  __/ |_| |  | | | | | |  __/_____| |  | |  __/
 * |_|   \___/ \___|_|\_\___|\__|_|  |_|_|_| |_|\___|     |_|  |_|_|
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * @author PocketMine Team
 * @link http://www.pocketmine.net/
 *
 *
*/

declare(strict_types=1);

namespace Johnmacrocraft\Newspaper\libs\dktapps\pmforms\element;

use pocketmine\form\FormValidationException;

/**
 * Base class for UI elements which can be placed on custom forms.
 */
abstract class CustomFormElement implements \JsonSerializable{
	/** @var string */
	private $name;
	/** @var string */
	private $text;

	public function __construct(string $name, string $text){
		$this->name = $name;
		$this->text = $text;
	}

	/**
	 * Returns the type of element.
	 * @return string
	 */
	abstract public function getType() : string;

	/**
	 * Returns the element's name. This is used to identify the element in code.
	 * @return string
	 */
	public function getName() : string{
		return $this->name;
	}

	/**
	 * Returns the element's label. Usually this is used to explain to the user what a control does.
	 * @return string
	 */
	public function getText() : string{
		return $this->text;
	}

	/**
	 * Validates that the given value is of the correct type and fits the constraints for the component. This function
	 * should do appropriate type checking and throw whatever errors necessary if the value is not valid.
	 *
	 * @param mixed $value
	 * @throws FormValidationException
	 */
	abstract public function validateValue($value) : void;

	/**
	 * Returns an array of properties which can be serialized to JSON for sending.
	 *
	 * @return array
	 */
	final public function jsonSerialize() : array{
		$ret = $this->serializeElementData();
		$ret["type"] = $this->getType();
		$ret["text"] = $this->getText();

		return $ret;
	}

	/**
	 * Returns an array of extra data needed to serialize this element to JSON for showing to a player on a form.
	 * @return array
	 */
	abstract protected function serializeElementData() : array;
}
<?php

/*
 *
 *  ____            _        _   __  __ _                  __  __ ____
 * |  _ \ ___   ___| | _____| |_|  \/  (_)_ __   ___      |  \/  |  _ \
 * | |_) / _ \ / __| |/ / _ \ __| |\/| | | '_ \ / _ \_____| |\/| | |_) |
 * |  __/ (_) | (__|   <  __/ |_| |  | | | | | |  __/_____| |  | |  __/
 * |_|   \___/ \___|_|\_\___|\__|_|  |_|_|_| |_|\___|     |_|  |_|_|
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * @author PocketMine Team
 * @link http://www.pocketmine.net/
 *
 *
*/

declare(strict_types=1);

namespace Johnmacrocraft\Newspaper\libs\dktapps\pmforms;

class CustomFormResponse{
	/** @var array */
	private $data;

	public function __construct(array $data){
		$this->data = $data;
	}

	public function getInt(string $name) : int{
		$this->checkExists($name);
		return $this->data[$name];
	}

	public function getString(string $name) : string{
		$this->checkExists($name);
		return $this->data[$name];
	}

	public function getFloat(string $name) : float{
		$this->checkExists($name);
		return $this->data[$name];
	}

	public function getBool(string $name) : bool{
		$this->checkExists($name);
		return $this->data[$name];
	}

	public function getAll() : array{
		return $this->data;
	}

	private function checkExists(string $name) : void{
		if(!isset($this->data[$name])){
			throw new \InvalidArgumentException("Value \"$name\" not found");
		}
	}
}
<?php

/*
 *
 * Newspaper
 *
 * Copyright Â© 2018 Johnmacrocraft
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 */

namespace Johnmacrocraft\Newspaper\forms;

use Johnmacrocraft\Newspaper\Newspaper;
use Johnmacrocraft\Newspaper\libs\dktapps\pmforms\MenuForm;
use Johnmacrocraft\Newspaper\libs\dktapps\pmforms\MenuOption;
use pocketmine\lang\BaseLang;
use pocketmine\Player;
use pocketmine\utils\Config;
use pocketmine\utils\TextFormat;

class ItemListForm extends MenuForm {

	/** @var BaseLang */
	private $lang;

	public function __construct(BaseLang $lang) {
		$this->lang = $lang;
		foreach(Newspaper::getPlugin()->getAllNewspaperInfo() as $info) {
			$options[] = new MenuOption((new Config($info, Config::YAML))->get("name"));
		}
		parent::__construct($lang->translateString("gui.itemlist.title"),
			$lang->translateString("gui.itemlist.label") .
			(isset($options) ? "" : str_repeat(TextFormat::EOL, 2) . $lang->translateString("gui.itemlist.label.noItems")),
			($options ?? []),
			function(Player $player, int $selectedOption) : void {
				$player->sendForm(new BuyInfoForm(Newspaper::getPlugin()->getNewspaperInfo($this->getOption($selectedOption)->getText()), $this->lang));
			}
		);
	}
}<?php

/*
 *
 * Newspaper
 *
 * Copyright Â© 2018 Johnmacrocraft
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 */

namespace Johnmacrocraft\Newspaper\forms;

use Johnmacrocraft\Newspaper\Newspaper;
use Johnmacrocraft\Newspaper\libs\dktapps\pmforms\MenuForm;
use Johnmacrocraft\Newspaper\libs\dktapps\pmforms\MenuOption;
use pocketmine\lang\BaseLang;
use pocketmine\Player;
use pocketmine\utils\Config;

class ManageForm extends MenuForm {

	/** @var BaseLang */
	private $lang;

	public function __construct(string $playerName, BaseLang $lang) {
		$this->lang = $lang;
		foreach(Newspaper::getPlugin()->getAllNewspaperInfo() as $info) {
			if(in_array($playerName, ($config = new Config($info, Config::YAML))->get("member"))) {
				$options[] = new MenuOption($config->get("name"));
			}
		}
		parent::__construct($lang->translateString("gui.manage.title"), $this->lang->translateString("gui.manage.label"), $options,
			function(Player $player, int $selectedOption) : void {
				$player->sendForm(new MyNewspaperInfoForm(Newspaper::getPlugin()->getNewspaperInfo($this->getOption($selectedOption)->getText()), $this->lang));
			}
		);
	}
}